{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/EditControl.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","EditControl","ActionType","babylonjs__WEBPACK_IMPORTED_MODULE_0__","mesh","camera","canvas","scale","eulerian","pickWidth","_this","this","_local","_snapT","_snapR","_transSnap","_rotSnap","Math","PI","_axesLen","_axesScale","_pickWidth","_visibility","_ecMatrix","_ecTOcamera","_distFromCamera","_cameraTOec","_cameraNormal","_prevState","_hidden","_actionListener","_actionStartListener","_actionEndListener","_pDown","_pointerIsOver","_editing","_rotate2","_transBy","_snapTV","_snapS","_snapSV","_scaleSnap","_scale","_localX","_localY","_localZ","_eulerian","_snapRA","_transEnabled","_rotEnabled","_scaleEnabled","_guideSize","_tSnap","_tv1","_tv2","_tv3","_tm","_mesh","_mainCamera","_canvas","_checkQuaternion","_scene","getScene","_actHist","ActHist","computeWorldMatrix","_boundingDimesion","_getBoundingDimension","_setLocalAxes","_ecRoot","rotationQuaternion","Identity","visibility","isPickable","_createMaterials","_createCommonAxes","parent","_createPickPlanes","_pointerdown","evt","_onPointerDown","_pointerup","_onPointerUp","_pointermove","_onPointerMove","addEventListener","_renderer","_renderLoopProcess","registerBeforeRender","undefined","position","getAbsolutePivotPoint","_setECRotation","_setECScale","getWorldMatrix","invertToRef","TransformCoordinatesToRef","_pALL","lookAt","LOCAL","subtractToRef","WORLD","_rotRotGuides","_rotPlanarGuides","_tXZ","_tZY","_tYX","_sXZ","_sZY","_sYX","rot","rotation","RotationYawPitchRollToRef","y","x","z","copyFrom","_isScaleUnEqual","getRotationMatrixToRef","FromRotationMatrixToRef","scaling","FromFloatArrayToRef","asArray","parentOnNormal","Dot","length","abs","FromFloatsToRef","rotX","atan","_rX","rotY","_rY","rotZ","_rZ","XZ","ZY","YX","ec","switchTo","refreshBoundingInfo","setUndoCount","setCapacity","undo","at","_callActionStartListener","_callActionListener","_callActionEndListener","redo","detach","removeEventListener","unregisterBeforeRender","removeAllActionListeners","_disposeAll","hide","disableTranslation","disableRotation","disableScaling","_hideCommonAxes","_xaxis","_yaxis","_zaxis","_showCommonAxes","show","enableTranslation","enableRotation","enableScaling","isHidden","dispose","_disposeMaterials","addActionListener","actionListener","removeActionListener","addActionStartListener","actionStartListener","removeActionStartListener","addActionEndListener","actionEndListener","removeActionEndListener","preventDefault","button","pickResult","pick","pointerX","pointerY","_tX","_tY","_tZ","_tAll","_rAll","_sX","_sY","_sZ","_sAll","hit","_axisPicked","pickedMesh","childs","getChildren","name_1","_bXaxis","_bYaxis","_bZaxis","_setEditing","_pickedPlane","_getPickPlane","_prevPos","_getPosOnPickPlane","setTimeout","cam","can","_detachCamera","editing","_setActionType","_actionType","ROT","isEditing","detachControl","isPointerOver","_onPointerOver","_prevOverMesh","_clearPrevOverMesh","_savedCol","color","White","_savedMat","material","_whiteMat","_restoreColor","Red","Green","Blue","attachControl","_hideBaxis","add","TRANS","SCALE","newPos","_doRotation","diff","subtract","_doTranslation","_doScaling","axis","_pXZ","_pZY","_pYX","_transWithSnap","_transBoundsMin","max","_transBoundsMax","min","trans","local","snapit","addInPlace","normalizeToRef","translate","setAbsolutePosition","absolutePosition","bbd","upVector","copyFromFloats","inPlane","_scaleWithSnap","_scaleBoundsMin","_scaleBoundsMax","meshMatrix","bb","getBoundingInfo","boundingBox","bd","maximum","minimum","prevPos","rAxis","angle","X","Y","Z","_getAngle2","useRightHandedSystem","_getAngle","normalize","rotate","toEulerAngles","pickinfo","pickedPoint","_setAxesVisiblity","v","_tEndX","_tEndY","_tEndZ","_tEndXZ","_tEndZY","_tEndYX","_tEndAll","_rEndX","_rEndY","_rEndZ","_rEndAll","_sEndX","_sEndY","_sEndZ","_sEndXZ","_sEndZY","_sEndYX","_sEndAll","getRotationQuaternion","getPosition","isTranslationEnabled","_createTransAxes","_tCtl","isRotationEnabled","returnEuler","euler","_rCtl","_createRotAxes","_rEndAll2","isScalingEnabled","_createScaleAxes","_sCtl","setScaleBounds","removeScaleBounds","setTransBounds","removeTransBounds","setRotBounds","_rotBoundsMin","_rotBoundsMax","removeRotBounds","guideAxes","CreateLines","al","renderingGroupId","CreatePlane","pickPlanes","_extrudeBox","clone","size","bakeCurrentTransformIntoVertices","CreateBox","cl","cr","CreateCylinder","_createTriangle","CreatePolyhedron","type","_redMat","_greenMat","_blueMat","_yellowMat","w","scene","addLineTo","build","setRotGuideFull","_createTube","_createCircle","Yellow","Gray","shape","path","ExtrudeShape","double","points","cos","sin","CreateTube","NO_CAP","_check_LHS_RHS","actualZ","Cross","setVisibility","setLocal","isLocal","setTransSnap","setRotSnap","setScaleSnap","setTransSnapValue","setRotSnapValue","setScaleSnapValue","p1","p2","cameraPos","c2ec","mN","scaleToRef","addToRef","q","subtractInPlace","mv","CrossToRef","asin","_getStandardMaterial","col","mat","emissiveColor","diffuseColor","Black","specularColor","backFaceCulling","capacity","lastMax","acts","Array","last","current","console","error","act","Act","splice","shift","push","getActionType","perform","_p","_rQ","_rE","_s","_at","RotationYawPitchRoll"],"mappings":"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","file":"EditControl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\r\nimport {\r\n    AbstractMesh,\r\n    Axis,\r\n    BoundingBox,\r\n    Camera,\r\n    Color3,\r\n    LinesMesh,\r\n    Material,\r\n    Matrix, \r\n    Mesh, \r\n    MeshBuilder, \r\n    Node, \r\n    PolygonMeshBuilder, \r\n    Path2, \r\n    PickingInfo, \r\n    Quaternion, \r\n    Scene, \r\n    Space, \r\n    StandardMaterial, \r\n    Vector3\r\n}\r\n    from 'babylonjs';\r\n    \r\n\r\n\r\nenum ActionType {\r\n    TRANS = 0,\r\n    ROT = 1,\r\n    SCALE = 2\r\n}\r\n\r\n/**\r\n * Draws a transform widget at the mesh's location (its pivot location).\r\n * The widget transforms(translates,rotates and scales) the mesh based on user\r\n * interactions with the widget.\r\n * The widget shows the mesh position and rotation at any time. \r\n * The widget follows the mesh constantly. \r\n * Note: An alternate approach would have been for the mesh to follow the widget.\r\n * The problem with the alternate approach - syncing the transforms\r\n * if the mesh was being transformed by entities other than the widget say physics \r\n * or script for example.\r\n * \r\n */\r\n\r\nexport class EditControl {\r\n    private _mesh: Mesh;\r\n\r\n    private _canvas: HTMLCanvasElement;\r\n    private _scene: Scene;\r\n    private _mainCamera: Camera;\r\n    //root of the edit control\r\n    private _ecRoot: Mesh;\r\n    private _local: boolean = true;\r\n    private _snapT: boolean = false;\r\n    private _snapR: boolean = false;\r\n    private _transSnap: number = 1;\r\n    private _rotSnap: number = Math.PI / 18;\r\n    private _axesLen: number = 0.4;\r\n    private _axesScale: number = 1;\r\n    //how close to an axis should we get before we can pick it \r\n    private _pickWidth: number = 0.02;\r\n    private _redMat: StandardMaterial;\r\n    private _greenMat: StandardMaterial;\r\n    private _blueMat: StandardMaterial;\r\n    private _whiteMat: StandardMaterial;\r\n    private _yellowMat: StandardMaterial;\r\n    private _actHist: ActHist;\r\n    private _renderer: () => void;\r\n    private _pointerdown: EventListener;\r\n    private _pointerup: EventListener;\r\n    private _pointermove: EventListener;\r\n    //axes visibility\r\n    private _visibility: number = 0.75;\r\n\r\n    //lhs-rhs issue. lhs mesh in rhs or rhs mesh in lhs\r\n    //private lhsRhs: boolean=false;\r\n\r\n    public constructor(mesh: Mesh, camera: Camera, canvas: HTMLCanvasElement, scale?: number, eulerian?: boolean, pickWidth?: number) {\r\n\r\n        this._mesh = mesh;\r\n        this._mainCamera = camera;\r\n        this._canvas = canvas;\r\n\r\n        if (scale != null) {\r\n            this._axesScale = scale;\r\n        }\r\n\r\n        if (eulerian !== null) {\r\n            this._eulerian = eulerian;\r\n        } else {\r\n            this._eulerian = false;\r\n        }\r\n        this._checkQuaternion();\r\n\r\n        if (pickWidth != null) {\r\n            this._pickWidth = pickWidth;\r\n        }\r\n\r\n        this._scene = mesh.getScene();\r\n        this._actHist = new ActHist(mesh, 10);\r\n\r\n        mesh.computeWorldMatrix(true);\r\n        this._boundingDimesion = this._getBoundingDimension(mesh);\r\n        this._setLocalAxes(mesh);\r\n        //this.lhsRhs=this.check_LHS_RHS(mesh);\r\n\r\n        //build the edit control axes\r\n        this._ecRoot = new Mesh(\"EditControl\", this._scene);\r\n        this._ecRoot.rotationQuaternion = Quaternion.Identity();\r\n        this._ecRoot.visibility = 0;\r\n        this._ecRoot.isPickable = false;\r\n\r\n        this._createMaterials(this._scene);\r\n\r\n        let guideAxes: Mesh = this._createCommonAxes();\r\n        guideAxes.parent = this._ecRoot;\r\n\r\n        //build the pickplanes\r\n        let pickPlanes: Mesh = this._createPickPlanes();\r\n        pickPlanes.parent = this._ecRoot;\r\n\r\n        this._pointerdown = (evt) => { return this._onPointerDown(evt) };\r\n        this._pointerup = (evt) => { return this._onPointerUp(evt) };\r\n        this._pointermove = (evt) => { return this._onPointerMove(evt) };\r\n\r\n        //use canvas rather than scene to handle pointer events\r\n        //scene cannot have mutiple eventlisteners for an event\r\n        //with canvas one will have to do ones own pickinfo generattion.\r\n\r\n        canvas.addEventListener(\"pointerdown\", this._pointerdown, false);\r\n        canvas.addEventListener(\"pointerup\", this._pointerup, false);\r\n        canvas.addEventListener(\"pointermove\", this._pointermove, false);\r\n\r\n\r\n        this._renderer = () => { return this._renderLoopProcess() };\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    //make sure that if eulerian is set to false then mesh's rotation is in quaternion\r\n    //throw error and exit if not so.\r\n    private _checkQuaternion() {\r\n        if (!this._eulerian) {\r\n            if ((this._mesh.rotationQuaternion == null) || (this._mesh.rotationQuaternion == undefined)) {\r\n                throw \"Error: Eulerian is set to false but the mesh's rotationQuaternion is not set.\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private _ecMatrix: Matrix = new Matrix();\r\n    //edit control to camera vector\r\n    private _ecTOcamera: Vector3 = new Vector3(0, 0, 0);\r\n    private _renderLoopProcess() {\r\n\r\n        //sync the edit control position and rotation with that of mesh\r\n        this._ecRoot.position = this._mesh.getAbsolutePivotPoint();\r\n        this._setECRotation();\r\n\r\n        //scale the EditControl so it seems at the same distance from camera/user\r\n        this._setECScale();\r\n\r\n        //rotate the free move,rotate,scale pick plane to face the camera/user\r\n        if (this._local) {\r\n            this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n            Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n            //note pALL is child of ecRoot hence lookAt in local space\r\n            this._pALL.lookAt(this._ecTOcamera, 0, 0, 0, Space.LOCAL);\r\n        } else {\r\n            this._mainCamera.position.subtractToRef(this._ecRoot.position, this._ecTOcamera);\r\n            this._pALL.lookAt(this._mainCamera.position, 0, 0, 0, Space.WORLD);\r\n        }\r\n\r\n        //rotate the rotation and planar guide to face the camera/user\r\n        if (this._rotEnabled) {\r\n            this._rotRotGuides();\r\n        }\r\n        else if (this._transEnabled) this._rotPlanarGuides(this._tXZ, this._tZY, this._tYX);\r\n        else if (this._scaleEnabled) this._rotPlanarGuides(this._sXZ, this._sZY, this._sYX);\r\n\r\n        //check pointer over axes only during pointer moves\r\n        //this.onPointerOver();\r\n    }\r\n\r\n    /**\r\n     * sets rotaion of edit control to that of the mesh\r\n     */\r\n    private _setECRotation() {\r\n        if (this._local) {\r\n            if (this._mesh.parent == null) {\r\n                if (this._eulerian) {\r\n                    let rot: Vector3 = this._mesh.rotation;\r\n                    Quaternion.RotationYawPitchRollToRef(rot.y, rot.x, rot.z, this._ecRoot.rotationQuaternion);\r\n                } else {\r\n                    this._ecRoot.rotationQuaternion.copyFrom(this._mesh.rotationQuaternion);\r\n                }\r\n            } else {\r\n\r\n                if (this._isScaleUnEqual(this._mesh)) return;\r\n\r\n                this._mesh.getWorldMatrix().getRotationMatrixToRef(this._tm);\r\n                Quaternion.FromRotationMatrixToRef(this._tm, this._ecRoot.rotationQuaternion);\r\n                //this._ecRoot.rotationQuaternion.normalize();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * checks if any of the mesh's ancestors has non uniform scale\r\n     */\r\n    private _isScaleUnEqual(mesh: Mesh): boolean {\r\n        if (mesh.parent == null) return false;\r\n        while (mesh.parent != null) {\r\n            if (((<Mesh>mesh.parent).scaling.x != (<Mesh>mesh.parent).scaling.y ||\r\n                (<Mesh>mesh.parent).scaling.y != (<Mesh>mesh.parent).scaling.z)) {\r\n                return true;\r\n            } else {\r\n                mesh = <Mesh>mesh.parent;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //how far away from camera should the edit control appear to be\r\n    private _distFromCamera: number = 2;\r\n    //vector from camera to edit control\r\n    private _cameraTOec: Vector3 = new Vector3(0, 0, 0);\r\n    private _cameraNormal: Vector3 = new Vector3(0, 0, 0);\r\n    private _setECScale() {\r\n        this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n        Vector3.FromFloatArrayToRef(this._mainCamera.getWorldMatrix().asArray(), 8, this._cameraNormal);\r\n\r\n        //get distance of edit control from the camera plane \r\n        //project \"camera to edit control\" vector onto the camera normal\r\n        let parentOnNormal: number = Vector3.Dot(this._cameraTOec, this._cameraNormal) / this._cameraNormal.length();\r\n\r\n        let s: number = Math.abs(parentOnNormal / this._distFromCamera);\r\n        Vector3.FromFloatsToRef(s, s, s, this._ecRoot.scaling);\r\n        //Vector3.FromFloatsToRef(s,s,s,this.pALL.scaling);\r\n    }\r\n\r\n\r\n    //rotate the rotation guides so that they are facing the camera\r\n    private _rotRotGuides() {\r\n        let rotX = Math.atan(this._ecTOcamera.y / this._ecTOcamera.z);\r\n        if (this._ecTOcamera.z >= 0) {\r\n            this._rX.rotation.x = -rotX;\r\n        } else {\r\n            this._rX.rotation.x = -rotX - Math.PI;\r\n        }\r\n\r\n        let rotY = Math.atan(this._ecTOcamera.x / this._ecTOcamera.z);\r\n        if (this._ecTOcamera.z >= 0) {\r\n            this._rY.rotation.y = rotY;\r\n        } else {\r\n            this._rY.rotation.y = rotY + Math.PI;\r\n        }\r\n\r\n        let rotZ = Math.atan(this._ecTOcamera.x / this._ecTOcamera.y);\r\n        if (this._ecTOcamera.y >= 0) {\r\n            this._rZ.rotation.z = -rotZ;\r\n        } else {\r\n            this._rZ.rotation.z = -rotZ - Math.PI;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rotate the planar guide so that they are facing the camera\r\n     */\r\n    private _rotPlanarGuides(XZ: Mesh, ZY: Mesh, YX: Mesh) {\r\n        let ec: Vector3 = this._ecTOcamera;\r\n\r\n        XZ.rotation.x = 0;\r\n        XZ.rotation.y = 0;\r\n        XZ.rotation.z = 0;\r\n\r\n        ZY.rotation.x = 0;\r\n        ZY.rotation.y = 0;\r\n        ZY.rotation.z = 0;\r\n\r\n        YX.rotation.x = 0;\r\n        YX.rotation.y = 0;\r\n        YX.rotation.z = 0;\r\n\r\n        if (ec.x <= 0 && ec.y >= 0 && ec.z >= 0) {\r\n            XZ.rotation.z = 3.14;\r\n            YX.rotation.y = 3.14;\r\n        } else if (ec.x <= 0 && ec.y >= 0 && ec.z <= 0) {\r\n            XZ.rotation.y = 3.14;\r\n            ZY.rotation.y = 3.14;\r\n            YX.rotation.y = 3.14;\r\n        } else if (ec.x >= 0 && ec.y >= 0 && ec.z <= 0) {\r\n            XZ.rotation.x = 3.14;\r\n            ZY.rotation.y = 3.14;\r\n        } else if (ec.x >= 0 && ec.y <= 0 && ec.z >= 0) {\r\n            ZY.rotation.z = 3.14;\r\n            YX.rotation.x = 3.14;\r\n        } else if (ec.x <= 0 && ec.y <= 0 && ec.z >= 0) {\r\n            XZ.rotation.z = 3.14;\r\n            ZY.rotation.z = 3.14;\r\n            YX.rotation.z = 3.14;\r\n        } else if (ec.x <= 0 && ec.y <= 0 && ec.z <= 0) {\r\n            XZ.rotation.y = 3.14;\r\n            ZY.rotation.x = 3.14;\r\n            YX.rotation.z = 3.14;\r\n        } else if (ec.x >= 0 && ec.y <= 0 && ec.z <= 0) {\r\n            XZ.rotation.x = 3.14;\r\n            ZY.rotation.x = 3.14;\r\n            YX.rotation.x = 3.14;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public switchTo(mesh: Mesh, eulerian?: boolean) {\r\n        mesh.computeWorldMatrix(true);\r\n        this._mesh = mesh;\r\n        if (eulerian != null) {\r\n            this._eulerian = eulerian;\r\n        }\r\n        this._checkQuaternion();\r\n        this._setLocalAxes(mesh);\r\n        this._actHist = new ActHist(mesh, 10);\r\n        this.refreshBoundingInfo();\r\n    }\r\n\r\n    public setUndoCount(c: number) {\r\n        this._actHist.setCapacity(c);\r\n    }\r\n\r\n    public undo() {\r\n        let at: number = this._actHist.undo();\r\n        this._mesh.computeWorldMatrix(true);\r\n        this._setLocalAxes(this._mesh);\r\n        this._callActionStartListener(at);\r\n        this._callActionListener(at);\r\n        this._callActionEndListener(at);\r\n    }\r\n\r\n    public redo() {\r\n        let at: number = this._actHist.redo();\r\n        this._mesh.computeWorldMatrix(true);\r\n        this._setLocalAxes(this._mesh);\r\n        this._callActionStartListener(at);\r\n        this._callActionListener(at);\r\n        this._callActionEndListener(at);\r\n    }\r\n\r\n    /**\r\n     * detach the edit control from the mesh and dispose off all\r\n     * resources created by the edit control\r\n     */\r\n    public detach() {\r\n        this._canvas.removeEventListener(\"pointerdown\", this._pointerdown, false);\r\n        this._canvas.removeEventListener(\"pointerup\", this._pointerup, false);\r\n        this._canvas.removeEventListener(\"pointermove\", this._pointermove, false);\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.removeAllActionListeners();\r\n        this._disposeAll();\r\n    }\r\n    private _prevState: String = \"\";\r\n    private _hidden: boolean = false;\r\n\r\n    /**\r\n     * hide the edit control. use show() to unhide the control.\r\n     */\r\n    public hide() {\r\n        this._hidden = true;\r\n        if (this._transEnabled) {\r\n            this._prevState = \"T\";\r\n            this.disableTranslation();\r\n        } else if (this._rotEnabled) {\r\n            this._prevState = \"R\";\r\n            this.disableRotation();\r\n        } else if (this._scaleEnabled) {\r\n            this._prevState = \"S\";\r\n            this.disableScaling();\r\n        }\r\n        this._hideCommonAxes();\r\n    }\r\n\r\n    private _hideCommonAxes() {\r\n        this._xaxis.visibility = 0;\r\n        this._yaxis.visibility = 0;\r\n        this._zaxis.visibility = 0;\r\n    }\r\n    private _showCommonAxes() {\r\n        this._xaxis.visibility = this._visibility;\r\n        this._yaxis.visibility = this._visibility;\r\n        this._zaxis.visibility = this._visibility;\r\n    }\r\n    /**\r\n     * unhide the editcontrol hidden using the hide() method\r\n     */\r\n    public show() {\r\n        this._hidden = false;\r\n        this._showCommonAxes();\r\n        if (this._prevState == \"T\") this.enableTranslation();\r\n        else if (this._prevState == \"R\") this.enableRotation();\r\n        else if (this._prevState == \"S\") this.enableScaling();\r\n    }\r\n\r\n    /**\r\n     * check if the editcontrol was hidden using the hide() methods\r\n     */\r\n    public isHidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    private _disposeAll() {\r\n        this._ecRoot.dispose();\r\n        this._disposeMaterials();\r\n        this._actHist = null;\r\n    }\r\n\r\n    private _actionListener: (actionType: number) => void = null;\r\n    private _actionStartListener: (actionType: number) => void = null;\r\n    private _actionEndListener: (actionType: number) => void = null;\r\n\r\n    public addActionListener(actionListener: (actionType: number) => void) {\r\n        this._actionListener = actionListener;\r\n    }\r\n    public removeActionListener() {\r\n        this._actionListener = null;\r\n    }\r\n    public addActionStartListener(actionStartListener: (actionType: number) => void) {\r\n        this._actionStartListener = actionStartListener;\r\n    }\r\n    public removeActionStartListener() {\r\n        this._actionStartListener = null;\r\n    }\r\n    public addActionEndListener(actionEndListener: (actionType: number) => void) {\r\n        this._actionEndListener = actionEndListener;\r\n    }\r\n    public removeActionEndListener() {\r\n        this._actionEndListener = null;\r\n    }\r\n\r\n    public removeAllActionListeners() {\r\n        this._actionListener = null;\r\n        this._actionStartListener = null;\r\n        this._actionEndListener = null;\r\n    }\r\n\r\n    private _pDown: boolean = false;\r\n\r\n    private _axisPicked: Mesh;\r\n\r\n    private _onPointerDown(evt: Event) {\r\n        evt.preventDefault();\r\n        this._pDown = true;\r\n        if ((<PointerEvent>evt).button != 0) return;\r\n        //TODO: do we really need to do a pick here?\r\n        //onPointerOver() has already done this.\r\n        let pickResult: PickingInfo = this._scene.pick(this._scene.pointerX, this._scene.pointerY, (mesh) => {\r\n            if (this._transEnabled) {\r\n                if ((mesh == this._tX) || (mesh == this._tY) || (mesh == this._tZ) || (mesh == this._tXZ) || (mesh == this._tZY) || (mesh == this._tYX) || (mesh == this._tAll)) return true;\r\n            } else if ((this._rotEnabled)) {\r\n                if ((mesh == this._rX) || (mesh == this._rY) || (mesh == this._rZ) || (mesh == this._rAll)) return true;\r\n            } else if ((this._scaleEnabled)) {\r\n                if ((mesh == this._sX) || (mesh == this._sY) || (mesh == this._sZ) || (mesh == this._sXZ) || (mesh == this._sZY) || (mesh == this._sYX) || (mesh == this._sAll)) return true;\r\n            }\r\n            return false;\r\n        }, null, this._mainCamera);\r\n\r\n        if (pickResult.hit) {\r\n            //this.setAxesVisiblity(0);\r\n            this._axisPicked = <Mesh>pickResult.pickedMesh;\r\n            let childs: Node[] = this._axisPicked.getChildren();\r\n            if (childs.length > 0) {\r\n                (<Mesh>childs[0]).visibility = this._visibility;\r\n            } else {\r\n                this._axisPicked.visibility = this._visibility;\r\n            }\r\n            let name: string = this._axisPicked.name;\r\n            if ((name == \"X\")) this._bXaxis.visibility = 1;\r\n            else if ((name == \"Y\")) this._bYaxis.visibility = 1;\r\n            else if ((name == \"Z\")) this._bZaxis.visibility = 1;\r\n            else if ((name == \"XZ\")) {\r\n                this._bXaxis.visibility = 1;\r\n                this._bZaxis.visibility = 1;\r\n            } else if ((name == \"ZY\")) {\r\n                this._bZaxis.visibility = 1;\r\n                this._bYaxis.visibility = 1;\r\n            } else if ((name == \"YX\")) {\r\n                this._bYaxis.visibility = 1;\r\n                this._bXaxis.visibility = 1;\r\n            } else if ((name == \"ALL\")) {\r\n                this._bXaxis.visibility = 1;\r\n                this._bYaxis.visibility = 1;\r\n                this._bZaxis.visibility = 1;\r\n            }\r\n            this._setEditing(true);\r\n            //lets find out where we are on the pickplane\r\n            this._pickedPlane = this._getPickPlane(this._axisPicked);\r\n            if (this._pickedPlane != null) {\r\n                this._prevPos = this._getPosOnPickPlane();\r\n            } else {\r\n                this._prevPos = null;\r\n            }\r\n            window.setTimeout(((cam, can) => { return this._detachCamera(cam, can) }), 0, this._mainCamera, this._canvas);\r\n        }\r\n    }\r\n\r\n    private _setEditing(editing: boolean) {\r\n        this._editing = editing;\r\n        if (editing) {\r\n            this._setActionType();\r\n            if (this._actionType == ActionType.ROT) {\r\n                this._snapRA = 0;\r\n            }\r\n            this._callActionStartListener(this._actionType);\r\n        } else {\r\n            this._callActionEndListener(this._actionType);\r\n        }\r\n    }\r\n\r\n    public isEditing(): boolean {\r\n        return this._editing;\r\n    }\r\n\r\n    /**\r\n     * no camera movement during edit\r\n     */\r\n    private _detachCamera(cam: Object, can: Object) {\r\n        let camera: Camera = <Camera>cam;\r\n        let canvas: HTMLCanvasElement = <HTMLCanvasElement>can;\r\n        camera.detachControl(canvas);\r\n    }\r\n\r\n    private _prevOverMesh: Mesh;\r\n\r\n    private _pointerIsOver: boolean = false;\r\n\r\n    public isPointerOver(): boolean {\r\n        return this._pointerIsOver;\r\n    }\r\n    private _savedMat: Material;\r\n    private _savedCol: Color3;\r\n    private _onPointerOver() {\r\n        //if(this.pDown) return;\r\n        let pickResult: PickingInfo = this._scene.pick(this._scene.pointerX, this._scene.pointerY, (mesh) => {\r\n            if (this._transEnabled) {\r\n                if ((mesh == this._tX) || (mesh == this._tY) || (mesh == this._tZ) || (mesh == this._tXZ) || (mesh == this._tZY) || (mesh == this._tYX) || (mesh == this._tAll)) return true;\r\n            } else if ((this._rotEnabled)) {\r\n                if ((mesh == this._rX) || (mesh == this._rY) || (mesh == this._rZ) || (mesh == this._rAll)) return true;\r\n            } else if (this._scaleEnabled) {\r\n                if ((mesh == this._sX) || (mesh == this._sY) || (mesh == this._sZ) || (mesh == this._sXZ) || (mesh == this._sZY) || (mesh == this._sYX) || (mesh == this._sAll)) return true;\r\n            }\r\n            return false;\r\n        }, null, this._mainCamera);\r\n        if (pickResult.hit) {\r\n            //if we are still over the same axis mesh then don't do anything\r\n            if (<Mesh>pickResult.pickedMesh != this._prevOverMesh) {\r\n                this._pointerIsOver = true;\r\n                //if we moved directly from one axis mesh to this then clean up the prev axis mesh\r\n                this._clearPrevOverMesh();\r\n                this._prevOverMesh = <Mesh>pickResult.pickedMesh;\r\n                if (this._rotEnabled) {\r\n                    this._savedCol = (<LinesMesh>this._prevOverMesh.getChildren()[0]).color;\r\n                    (<LinesMesh>this._prevOverMesh.getChildren()[0]).color = Color3.White();\r\n                } else {\r\n                    let childs: Node[] = this._prevOverMesh.getChildren();\r\n                    if (childs.length > 0) {\r\n                        this._savedMat = (<Mesh>childs[0]).material;\r\n                        (<Mesh>childs[0]).material = this._whiteMat;\r\n                    } else {\r\n                        this._savedMat = this._prevOverMesh.material;\r\n                        this._prevOverMesh.material = this._whiteMat;\r\n                    }\r\n                }\r\n                if (this._prevOverMesh.name == \"X\") {\r\n                    this._xaxis.color = Color3.White();\r\n                } else if (this._prevOverMesh.name == \"Y\") {\r\n                    this._yaxis.color = Color3.White();\r\n                } else if (this._prevOverMesh.name == \"Z\") {\r\n                    this._zaxis.color = Color3.White();\r\n                }\r\n            }\r\n        } else {\r\n            this._pointerIsOver = false;\r\n            if (this._prevOverMesh != null) {\r\n                this._restoreColor(this._prevOverMesh);\r\n                this._prevOverMesh = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    //clean up any axis we might have been howering over before\r\n    private _clearPrevOverMesh() {\r\n        if (this._prevOverMesh != null) {\r\n            this._prevOverMesh.visibility = 0;\r\n            this._restoreColor(this._prevOverMesh);\r\n        }\r\n    }\r\n\r\n    private _restoreColor(mesh: Mesh) {\r\n        switch (mesh.name) {\r\n            case \"X\":\r\n                this._xaxis.color = Color3.Red();\r\n                break;\r\n            case \"Y\":\r\n                this._yaxis.color = Color3.Green();\r\n                break;\r\n            case \"Z\":\r\n                this._zaxis.color = Color3.Blue();\r\n                break;\r\n        }\r\n\r\n        if (this._rotEnabled) {\r\n            (<LinesMesh>mesh.getChildren()[0]).color = this._savedCol;\r\n        } else {\r\n            let childs: Node[] = mesh.getChildren();\r\n            if (childs.length > 0) {\r\n                (<Mesh>childs[0]).material = this._savedMat;\r\n            } else {\r\n                mesh.material = this._savedMat;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _editing: boolean = false;\r\n\r\n    private _onPointerUp(evt: Event) {\r\n        this._pDown = false;\r\n        if (this._editing) {\r\n            this._mainCamera.attachControl(this._canvas);\r\n            this._setEditing(false);\r\n            //this.setAxesVisiblity(1);\r\n            this._hideBaxis();\r\n            if (this._prevOverMesh != null) {\r\n                this._restoreColor(this._prevOverMesh);\r\n                this._prevOverMesh = null;\r\n            }\r\n            this._actHist.add(this._actionType);\r\n        }\r\n    }\r\n\r\n    private _actionType: number;\r\n    private _setActionType() {\r\n        if (this._transEnabled) {\r\n            this._actionType = ActionType.TRANS;\r\n        } else if ((this._rotEnabled)) {\r\n            this._actionType = ActionType.ROT;\r\n        } else if ((this._scaleEnabled)) {\r\n            this._actionType = ActionType.SCALE;\r\n        }\r\n    }\r\n\r\n    private _callActionListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionListener != null) {\r\n            this._actionListener(at);\r\n        }\r\n\r\n    }\r\n    private _callActionStartListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionStartListener != null) {\r\n            this._actionStartListener(at);\r\n        }\r\n\r\n    }\r\n    private _callActionEndListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionEndListener != null) {\r\n            this._actionEndListener(at);\r\n        }\r\n\r\n    }\r\n\r\n    private _prevPos: Vector3;\r\n    private _onPointerMove(evt: Event) {\r\n\r\n        if (!this._pDown) {\r\n            this._onPointerOver();\r\n            return;\r\n        }\r\n        if (!this._editing) return;\r\n        if (this._prevPos == null) return;\r\n\r\n        let newPos: Vector3 = this._getPosOnPickPlane();\r\n\r\n        if (newPos == null) return;\r\n\r\n        if (this._rotEnabled) {\r\n            this._doRotation(this._mesh, this._axisPicked, newPos, this._prevPos);\r\n        } else {\r\n            let diff: Vector3 = newPos.subtract(this._prevPos);\r\n            if (diff.x == 0 && diff.y == 0 && diff.z == 0) return;\r\n            if (this._transEnabled) {\r\n                this._doTranslation(diff);\r\n            } else {\r\n                if (this._scaleEnabled && this._local) this._doScaling(diff);\r\n            }\r\n        }\r\n        this._prevPos = newPos;\r\n        this._callActionListener(this._actionType);\r\n    }\r\n\r\n\r\n    //rotate differently if camera is too close to the rotation plane\r\n    private _rotate2: boolean = false;\r\n    private _getPickPlane(axis: Mesh): Mesh {\r\n        let n: string = axis.name;\r\n        if (this._transEnabled || this._scaleEnabled) {\r\n            if (n == \"XZ\") return this._pXZ;\r\n            else if (n == \"ZY\") return this._pZY;\r\n            else if (n == \"YX\") return this._pYX;\r\n            else if (n == \"ALL\") return this._pALL;\r\n            else {\r\n                //get the position of camera in the edit control frame of reference\r\n                this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n                Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n                let c = this._ecTOcamera;\r\n                if (n === \"X\") {\r\n                    if (Math.abs(c.y) > Math.abs(c.z)) {\r\n                        return this._pXZ;\r\n                    } else return this._pYX;\r\n                } else if (n === \"Z\") {\r\n                    if (Math.abs(c.y) > Math.abs(c.x)) {\r\n                        return this._pXZ;\r\n                    } else return this._pZY;\r\n                } else if (n === \"Y\") {\r\n                    if (Math.abs(c.z) > Math.abs(c.x)) {\r\n                        return this._pYX;\r\n                    } else return this._pZY;\r\n                }\r\n            }\r\n        } else if (this._rotEnabled) {\r\n            this._rotate2 = false;\r\n            //get the position of camera in the edit control frame of reference\r\n            this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n            Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n            let c = this._ecTOcamera;\r\n            //if camera is too close to the rotation plane then use alternate rotation process\r\n            switch (n) {\r\n                case \"X\":\r\n                    if (Math.abs(c.x) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pZY;\r\n                case \"Y\":\r\n                    if (Math.abs(c.y) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pXZ;\r\n                case \"Z\":\r\n                    if (Math.abs(c.z) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pYX;\r\n                default:\r\n                    return this._pALL;\r\n            }\r\n        } else return null;\r\n    }\r\n\r\n\r\n\r\n    private _transBy: Vector3 = new Vector3(0, 0, 0);\r\n    private _doTranslation(diff: Vector3) {\r\n\r\n        if ((this._mesh.parent != null) && this._isScaleUnEqual(this._mesh)) {\r\n            this._setLocalAxes(this._ecRoot);\r\n        } else {\r\n            this._setLocalAxes(this._mesh);\r\n        }\r\n\r\n        let n: string = this._axisPicked.name;\r\n        if (n == \"ALL\") {\r\n            //TODO when translating, the orientation of pALL keeps changing\r\n            //TODo this is not so with rotation or scaling\r\n            //TODO so for translation instead of pALL maybe we should use the camera view plane for picking\r\n            this._transBy = diff;\r\n        } else {\r\n            this._transBy.x = 0; this._transBy.y = 0; this._transBy.z = 0;\r\n\r\n            if ((n == \"X\") || (n == \"XZ\") || (n == \"YX\")) {\r\n                if (this._local) this._transBy.x = Vector3.Dot(diff, this._localX) / this._localX.length();\r\n                else this._transBy.x = diff.x;\r\n            }\r\n            if ((n == \"Y\") || (n == \"ZY\") || (n == \"YX\")) {\r\n                if (this._local) this._transBy.y = Vector3.Dot(diff, this._localY) / this._localY.length();\r\n                else this._transBy.y = diff.y;\r\n            }\r\n            if ((n == \"Z\") || (n == \"XZ\") || (n == \"ZY\")) {\r\n                if (this._local) this._transBy.z = Vector3.Dot(diff, this._localZ) / this._localZ.length();\r\n                else this._transBy.z = diff.z;\r\n            }\r\n        }\r\n        this._transWithSnap(this._mesh, this._transBy, this._local);\r\n\r\n        // bound the translation\r\n        if (this._transBoundsMin) {\r\n            this._mesh.position.x = Math.max(this._mesh.position.x, this._transBoundsMin.x);\r\n            this._mesh.position.y = Math.max(this._mesh.position.y, this._transBoundsMin.y);\r\n            this._mesh.position.z = Math.max(this._mesh.position.z, this._transBoundsMin.z);\r\n        }\r\n        if (this._transBoundsMax) {\r\n            this._mesh.position.x = Math.min(this._mesh.position.x, this._transBoundsMax.x);\r\n            this._mesh.position.y = Math.min(this._mesh.position.y, this._transBoundsMax.y);\r\n            this._mesh.position.z = Math.min(this._mesh.position.z, this._transBoundsMax.z);\r\n        }\r\n\r\n        this._mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n\r\n\r\n    private _snapTV: Vector3 = new Vector3(0, 0, 0);\r\n    private _transWithSnap(mesh: Mesh, trans: Vector3, local: boolean) {\r\n        if (this._snapT) {\r\n            let snapit: boolean = false;\r\n            this._snapTV.addInPlace(trans);\r\n            if (Math.abs(this._snapTV.x) > this._tSnap.x) {\r\n                if (this._snapTV.x > 0) trans.x = this._tSnap.x; else trans.x = -this._tSnap.x;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapTV.y) > this._tSnap.y) {\r\n                if (this._snapTV.y > 0) trans.y = this._tSnap.y; else trans.y = -this._tSnap.y;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapTV.z) > this._tSnap.z) {\r\n                if (this._snapTV.z > 0) trans.z = this._tSnap.z; else trans.z = -this._tSnap.z;\r\n                snapit = true;\r\n            }\r\n            if (snapit) {\r\n                if (Math.abs(trans.x) !== this._tSnap.x) trans.x = 0;\r\n                if (Math.abs(trans.y) !== this._tSnap.y) trans.y = 0;\r\n                if (Math.abs(trans.z) !== this._tSnap.z) trans.z = 0;\r\n                Vector3.FromFloatsToRef(0, 0, 0, this._snapTV);\r\n                snapit = false;\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (local) {\r\n            //locallyTranslate moves the mesh wrt the absolute location not pivotlocation :(\r\n            //this.mesh.locallyTranslate(trans);\r\n            //\r\n\r\n\r\n\r\n            this._localX.normalizeToRef(this._tv1);\r\n            this._localY.normalizeToRef(this._tv2);\r\n            this._localZ.normalizeToRef(this._tv3);\r\n            this._mesh.translate(this._tv1, trans.x, Space.WORLD);\r\n            this._mesh.translate(this._tv2, trans.y, Space.WORLD);\r\n            this._mesh.translate(this._tv3, trans.z, Space.WORLD);\r\n\r\n\r\n        } else {\r\n            if (this._mesh.parent == null) {\r\n                this._mesh.position.addInPlace(trans);\r\n            } else {\r\n                this._mesh.setAbsolutePosition(trans.addInPlace(this._mesh.absolutePosition));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private _snapS: boolean = false;\r\n    private _snapSV: Vector3 = new Vector3(0, 0, 0);\r\n    private _scaleSnap: number = 0.25;\r\n    private _scale: Vector3 = new Vector3(0, 0, 0);\r\n    private _doScaling(diff: Vector3) {\r\n        this._setLocalAxes(this._mesh);\r\n\r\n        this._scale.x = 0;\r\n        this._scale.y = 0;\r\n        this._scale.z = 0;\r\n        let n: string = this._axisPicked.name;\r\n        if ((n == \"X\") || (n == \"XZ\") || (n == \"YX\")) {\r\n            this._scale.x = Vector3.Dot(diff, this._localX) / this._localX.length();\r\n            if (this._mesh.scaling.x < 0) this._scale.x = -this._scale.x;\r\n            //if(this.lhsRhs) this.scale.x=-this.scale.x;\r\n        }\r\n        if ((n == \"Y\") || (n == \"ZY\") || (n == \"YX\")) {\r\n            this._scale.y = Vector3.Dot(diff, this._localY) / this._localY.length();\r\n            if (this._mesh.scaling.y < 0) this._scale.y = -this._scale.y;\r\n        }\r\n        if ((n == \"Z\") || (n == \"XZ\") || (n == \"ZY\")) {\r\n            this._scale.z = Vector3.Dot(diff, this._localZ) / this._localZ.length();\r\n            if (this._mesh.scaling.z < 0) this._scale.z = -this._scale.z;\r\n        }\r\n\r\n        //as the mesh becomes large reduce the amount by which we scale.\r\n        let bbd = this._boundingDimesion;\r\n        this._scale.x = this._scale.x / bbd.x;\r\n        this._scale.y = this._scale.y / bbd.y;\r\n        this._scale.z = this._scale.z / bbd.z;\r\n\r\n        if (n == \"ALL\") {\r\n            //project movement along camera up vector\r\n            //if up then scale up else scale down\r\n            let s: number = Vector3.Dot(diff, this._mainCamera.upVector);\r\n            s = s / Math.max(bbd.x, bbd.y, bbd.z);\r\n            this._scale.copyFromFloats(s, s, s);\r\n        } else {\r\n            let inPlane: boolean = false;\r\n            if (n == \"XZ\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.x) > Math.abs(this._scale.z)) {\r\n                    this._scale.z = this._scale.x;\r\n                } else this._scale.x = this._scale.z;\r\n            } else if (n == \"ZY\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.z) > Math.abs(this._scale.y)) {\r\n                    this._scale.y = this._scale.z;\r\n                } else this._scale.z = this._scale.y;\r\n            } else if (n == \"YX\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.y) > Math.abs(this._scale.x)) {\r\n                    this._scale.x = this._scale.y;\r\n                } else this._scale.y = this._scale.x;\r\n            }\r\n            if (inPlane) {\r\n                //check if the mouse/pointer was moved towards camera or away from camera\r\n                //if towards then scale up else scale down\r\n                this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n                let s: number = Vector3.Dot(diff, this._cameraTOec);\r\n                this._scale.x = Math.abs(this._scale.x);\r\n                this._scale.y = Math.abs(this._scale.y);\r\n                this._scale.z = Math.abs(this._scale.z);\r\n                if (s > 0) {\r\n                    if (this._mesh.scaling.x > 0) this._scale.x = -this._scale.x;\r\n                    //if(this.lhsRhs) this.scale.y=Math.abs(this.scale.y);\r\n                    if (this._mesh.scaling.y > 0) this._scale.y = -this._scale.y;\r\n                    if (this._mesh.scaling.z > 0) this._scale.z = -this._scale.z;\r\n                } else {\r\n                    //this.scale.x=Math.abs(this.scale.x);\r\n                    //if(this.lhsRhs) this.scale.y=-Math.abs(this.scale.y);\r\n                    //else this.scale.y=Math.abs(this.scale.y);\r\n                    if (this._mesh.scaling.x < 0) this._scale.x = -this._scale.x;\r\n                    if (this._mesh.scaling.y < 0) this._scale.y = -this._scale.y;\r\n                    if (this._mesh.scaling.z < 0) this._scale.z = -this._scale.z;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this._scaleWithSnap(this._mesh, this._scale);\r\n\r\n        // bound the scale\r\n        if (this._scaleBoundsMin) {\r\n            this._mesh.scaling.x = Math.max(this._mesh.scaling.x, this._scaleBoundsMin.x);\r\n            this._mesh.scaling.y = Math.max(this._mesh.scaling.y, this._scaleBoundsMin.y);\r\n            this._mesh.scaling.z = Math.max(this._mesh.scaling.z, this._scaleBoundsMin.z);\r\n        }\r\n        if (this._scaleBoundsMax) {\r\n            this._mesh.scaling.x = Math.min(this._mesh.scaling.x, this._scaleBoundsMax.x);\r\n            this._mesh.scaling.y = Math.min(this._mesh.scaling.y, this._scaleBoundsMax.y);\r\n            this._mesh.scaling.z = Math.min(this._mesh.scaling.z, this._scaleBoundsMax.z);\r\n        }\r\n\r\n    }\r\n\r\n    private _scaleWithSnap(mesh: Mesh, p: Vector3) {\r\n        if (this._snapS) {\r\n            let snapit: boolean = false;\r\n            this._snapSV.addInPlace(p);\r\n            if (Math.abs(this._snapSV.x) > this._scaleSnap) {\r\n                if (p.x > 0) p.x = this._scaleSnap; else p.x = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapSV.y) > this._scaleSnap) {\r\n                if (p.y > 0) p.y = this._scaleSnap; else p.y = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapSV.z) > this._scaleSnap) {\r\n                if (p.z > 0) p.z = this._scaleSnap; else p.z = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (!snapit) return;\r\n            if ((Math.abs(p.x) !== this._scaleSnap) && (p.x !== 0)) p.x = 0;\r\n            if ((Math.abs(p.y) !== this._scaleSnap) && (p.y !== 0)) p.y = 0;\r\n            if ((Math.abs(p.z) !== this._scaleSnap) && (p.z !== 0)) p.z = 0;\r\n            Vector3.FromFloatsToRef(0, 0, 0, this._snapSV);\r\n            snapit = false;\r\n        }\r\n        mesh.scaling.addInPlace(p);\r\n\r\n    }\r\n\r\n    private _localX: Vector3 = new Vector3(0, 0, 0);\r\n    private _localY: Vector3 = new Vector3(0, 0, 0);\r\n    private _localZ: Vector3 = new Vector3(0, 0, 0);\r\n\r\n    /*\r\n     * This would be called after rotation or scaling as the local axes direction or length might have changed\r\n     * We need to set the local axis as these are used in all three modes to figure out \r\n     * direction of mouse move wrt the axes\r\n     * TODO should use world pivotmatrix instead of worldmatrix - incase pivot axes were rotated?\r\n     */\r\n    private _setLocalAxes(mesh: Mesh) {\r\n        let meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 0, this._localX);\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 4, this._localY);\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 8, this._localZ);\r\n    }\r\n\r\n\r\n    /*\r\n     * boundingDimesion is used by scaling to adjust rate at which a mesh is scaled\r\n     * with respect to mouse movement.\r\n     *\r\n     */\r\n    private _boundingDimesion: Vector3;\r\n    private _getBoundingDimension(mesh: Mesh): Vector3 {\r\n        let bb: BoundingBox = mesh.getBoundingInfo().boundingBox;\r\n        let bd: Vector3 = bb.maximum.subtract(bb.minimum);\r\n        if (bd.x == 0) bd.x = 1;\r\n        if (bd.y == 0) bd.y = 1;\r\n        if (bd.z == 0) bd.z = 1;\r\n        return bd;\r\n    }\r\n\r\n    /*\r\n     *\r\n     * For the sake of speed the editcontrol calculates bounding info only once.\r\n     * This is in the constructor.\r\n     * Now The boundingbox dimension can change if the mesh is baked.\r\n     * If the editcontrol is attached to the mesh when the mesh was baked then\r\n     * the scaling speed will be incorrect.\r\n     * Thus client application should call refreshBoundingInfo if it bakes the mesh.\r\n     *\r\n     */\r\n    public refreshBoundingInfo() {\r\n        this._boundingDimesion = this._getBoundingDimension(this._mesh);\r\n    }\r\n\r\n    private _eulerian: boolean = false;\r\n    private _snapRA: number = 0;\r\n    private _doRotation(mesh: Mesh, axis: Mesh, newPos: Vector3, prevPos: Vector3) {\r\n\r\n        //for now no rotation if parents have non uniform scale\r\n        if (this._local && (this._mesh.parent != null) && this._isScaleUnEqual(mesh)) {\r\n            this._setLocalAxes(this._ecRoot);\r\n        } else {\r\n            this._setLocalAxes(mesh);\r\n        }\r\n\r\n        let angle: number = 0;\r\n\r\n        //rotation axis\r\n        let rAxis: Vector3;\r\n        if (axis == this._rX) rAxis = this._local ? this._localX : Axis.X;\r\n        else if (axis == this._rY) rAxis = this._local ? this._localY : Axis.Y;\r\n        else if (axis == this._rZ) rAxis = this._local ? this._localZ : Axis.Z;\r\n\r\n        this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n\r\n        /**\r\n         * A)first find the angle and the direction (clockwise or anticlockwise) by which the user was trying to rotate\r\n         * from the user(camera) perspective\r\n         */\r\n        if (this._rotate2) {\r\n            angle = this._getAngle2(prevPos, newPos, this._mainCamera.position, this._cameraTOec, rAxis);\r\n            //TODO check why we need to handle righ hand this way\r\n            if (this._scene.useRightHandedSystem) angle = -angle;\r\n        } else {\r\n            angle = this._getAngle(prevPos, newPos, mesh.getAbsolutePivotPoint(), this._cameraTOec);\r\n        }\r\n\r\n        /**\r\n         * B)then rotate based on users(camera) postion and orientation in the local/world space\r\n         * \r\n         */\r\n\r\n        if (this._snapR) {\r\n            this._snapRA += angle;\r\n            angle = 0;\r\n            if (Math.abs(this._snapRA) >= this._rotSnap) {\r\n                if (this._snapRA > 0) angle = this._rotSnap; else angle = -this._rotSnap;\r\n                this._snapRA = 0;\r\n            }\r\n        }\r\n\r\n        if (angle !== 0) {\r\n            this._cameraTOec.normalize();\r\n            if (axis == this._rAll) {\r\n                mesh.rotate(this._cameraTOec, -angle, Space.WORLD);\r\n            } else {\r\n                if (Vector3.Dot(rAxis, this._cameraTOec) >= 0) angle = -angle;\r\n                mesh.rotate(rAxis, angle, Space.WORLD);\r\n            }\r\n\r\n            if (this._eulerian) {\r\n                mesh.rotation = mesh.rotationQuaternion.toEulerAngles();\r\n                mesh.rotationQuaternion = null;\r\n            }\r\n\r\n            if (this._local) {\r\n                if ((this._mesh.parent != null) && this._isScaleUnEqual(mesh)) {\r\n                    if (axis == this._rAll) {\r\n                        this._ecRoot.rotate(this._cameraTOec, -angle, Space.WORLD);\r\n                    } else {\r\n                        this._ecRoot.rotate(rAxis, angle, Space.WORLD);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getPosOnPickPlane(): Vector3 {\r\n        let pickinfo: PickingInfo = this._scene.pick(this._scene.pointerX, this._scene.pointerY, (mesh) => {\r\n            return mesh == this._pickedPlane;\r\n        }, null, this._mainCamera);\r\n\r\n        if (pickinfo.hit) {\r\n            return pickinfo.pickedPoint;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _hideBaxis() {\r\n        this._bXaxis.visibility = 0;\r\n        this._bYaxis.visibility = 0;\r\n        this._bZaxis.visibility = 0;\r\n    }\r\n\r\n    private _setAxesVisiblity(v: number) {\r\n        if (this._transEnabled) {\r\n            this._tEndX.visibility = v;\r\n            this._tEndY.visibility = v;\r\n            this._tEndZ.visibility = v;\r\n            this._tEndXZ.visibility = v;\r\n            this._tEndZY.visibility = v;\r\n            this._tEndYX.visibility = v;\r\n            this._tEndAll.visibility = v;\r\n        }\r\n        if (this._rotEnabled) {\r\n            this._rEndX.visibility = v;\r\n            this._rEndY.visibility = v;\r\n            this._rEndZ.visibility = v;\r\n            this._rEndAll.visibility = v;\r\n        }\r\n        if (this._scaleEnabled) {\r\n            this._sEndX.visibility = v;\r\n            this._sEndY.visibility = v;\r\n            this._sEndZ.visibility = v;\r\n            this._sEndXZ.visibility = v;\r\n            this._sEndZY.visibility = v;\r\n            this._sEndYX.visibility = v;\r\n            this._sEndAll.visibility = v;\r\n        }\r\n    }\r\n\r\n    public getRotationQuaternion(): Quaternion {\r\n        return this._ecRoot.rotationQuaternion\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this._ecRoot.position;\r\n    }\r\n\r\n    private _transEnabled: boolean = false;\r\n\r\n    public isTranslationEnabled(): boolean {\r\n        return this._transEnabled;\r\n    }\r\n\r\n    public enableTranslation() {\r\n        if ((this._tX == null)) {\r\n            this._createTransAxes();\r\n            this._tCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._transEnabled) {\r\n            this._tEndX.visibility = this._visibility;\r\n            this._tEndY.visibility = this._visibility;\r\n            this._tEndZ.visibility = this._visibility;\r\n            this._tEndXZ.visibility = this._visibility;\r\n            this._tEndZY.visibility = this._visibility;\r\n            this._tEndYX.visibility = this._visibility;\r\n            this._tEndAll.visibility = this._visibility;\r\n            this._transEnabled = true;\r\n            this.disableRotation();\r\n            this.disableScaling();\r\n        }\r\n    }\r\n\r\n    public disableTranslation() {\r\n        if (this._transEnabled) {\r\n            this._tEndX.visibility = 0;\r\n            this._tEndY.visibility = 0;\r\n            this._tEndZ.visibility = 0;\r\n            this._tEndXZ.visibility = 0;\r\n            this._tEndZY.visibility = 0;\r\n            this._tEndYX.visibility = 0;\r\n            this._tEndAll.visibility = 0;\r\n            this._transEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _rotEnabled: boolean = false;\r\n\r\n    public isRotationEnabled(): boolean {\r\n        return this._rotEnabled;\r\n    }\r\n\r\n    public returnEuler(euler: boolean) {\r\n        this._eulerian = euler;\r\n    }\r\n\r\n    public enableRotation() {\r\n        //if(this.rX==null) {\r\n        if (this._rCtl == null) {\r\n            this._createRotAxes();\r\n            this._rCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._rotEnabled) {\r\n            this._rEndX.visibility = this._visibility;\r\n            this._rEndY.visibility = this._visibility;\r\n            this._rEndZ.visibility = this._visibility;\r\n\r\n            this._rEndAll.visibility = this._visibility;\r\n            this._rEndAll2.visibility = this._visibility;\r\n\r\n            this._rotEnabled = true;\r\n            this.disableTranslation();\r\n            this.disableScaling();\r\n        }\r\n    }\r\n\r\n    public disableRotation() {\r\n        if (this._rotEnabled) {\r\n            this._rEndX.visibility = 0;\r\n            this._rEndY.visibility = 0;\r\n            this._rEndZ.visibility = 0;\r\n            this._rEndAll.visibility = 0;\r\n            this._rEndAll2.visibility = 0;\r\n            this._rotEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _scaleEnabled: boolean = false;\r\n\r\n    public isScalingEnabled(): boolean {\r\n        return this._scaleEnabled;\r\n    }\r\n\r\n    public enableScaling() {\r\n        if (this._sX == null) {\r\n            this._createScaleAxes();\r\n            this._sCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._scaleEnabled) {\r\n            this._sEndX.visibility = this._visibility;\r\n            this._sEndY.visibility = this._visibility;\r\n            this._sEndZ.visibility = this._visibility;\r\n            this._sEndXZ.visibility = this._visibility;\r\n            this._sEndZY.visibility = this._visibility;\r\n            this._sEndYX.visibility = this._visibility;\r\n            this._sEndAll.visibility = this._visibility;\r\n            this._scaleEnabled = true;\r\n            this.disableTranslation();\r\n            this.disableRotation();\r\n        }\r\n    }\r\n\r\n    public disableScaling() {\r\n        if (this._scaleEnabled) {\r\n            this._sEndX.visibility = 0;\r\n            this._sEndY.visibility = 0;\r\n            this._sEndZ.visibility = 0;\r\n            this._sEndXZ.visibility = 0;\r\n            this._sEndZY.visibility = 0;\r\n            this._sEndYX.visibility = 0;\r\n            this._sEndAll.visibility = 0;\r\n            this._scaleEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _scaleBoundsMin: Vector3;\r\n    private _scaleBoundsMax: Vector3;\r\n\r\n    public setScaleBounds(min?: Vector3, max?: Vector3) {\r\n        this._scaleBoundsMin = min ? min : null;\r\n        this._scaleBoundsMax = max ? max : null;\r\n        if (this._scaleBoundsMin != null) {\r\n            if (this._scaleBoundsMin.x == 0) this._scaleBoundsMin.x = 0.00000001;\r\n            if (this._scaleBoundsMin.y == 0) this._scaleBoundsMin.y = 0.00000001;\r\n            if (this._scaleBoundsMin.z == 0) this._scaleBoundsMin.z = 0.00000001;\r\n        }\r\n    }\r\n\r\n    public removeScaleBounds() {\r\n        this._scaleBoundsMin = null;\r\n        this._scaleBoundsMax = null;\r\n    }\r\n\r\n\r\n    private _transBoundsMin: Vector3;\r\n    private _transBoundsMax: Vector3;\r\n\r\n    public setTransBounds(min?: Vector3, max?: Vector3) {\r\n        this._transBoundsMin = min ? min : null;\r\n        this._transBoundsMax = max ? max : null;\r\n    }\r\n\r\n    public removeTransBounds() {\r\n        this._transBoundsMin = null;\r\n        this._transBoundsMax = null;\r\n    }\r\n\r\n    private _rotBoundsMin: Vector3;\r\n    private _rotBoundsMax: Vector3;\r\n\r\n    public setRotBounds(min?: Vector3, max?: Vector3) {\r\n        this._rotBoundsMin = min ? min : null;\r\n        this._rotBoundsMax = max ? max : null;\r\n    }\r\n\r\n    public removeRotBounds() {\r\n        this._rotBoundsMin = null;\r\n        this._rotBoundsMax = null;\r\n    }\r\n\r\n    private _bXaxis: LinesMesh;\r\n    private _bYaxis: LinesMesh;\r\n    private _bZaxis: LinesMesh;\r\n    private _xaxis: LinesMesh;\r\n    private _yaxis: LinesMesh;\r\n    private _zaxis: LinesMesh;\r\n\r\n\r\n    /*\r\n     * create big and small axeses which will be shown in translate, rotate and scale mode.\r\n     *\r\n     */\r\n    private _createCommonAxes(): Mesh {\r\n\r\n        let guideAxes: Mesh = new Mesh(\"guideCtl\", this._scene);\r\n\r\n        //the big axes, shown when an axis is selected\r\n        this._bXaxis = Mesh.CreateLines(\"bxAxis\", [new Vector3(-100, 0, 0), new Vector3(100, 0, 0)], this._scene);\r\n        this._bYaxis = Mesh.CreateLines(\"byAxis\", [new Vector3(0, -100, 0), new Vector3(0, 100, 0)], this._scene);\r\n        this._bZaxis = Mesh.CreateLines(\"bzAxis\", [new Vector3(0, 0, -100), new Vector3(0, 0, 100)], this._scene);\r\n\r\n        //lines are now pickable too\r\n        this._bXaxis.isPickable = false;\r\n        this._bYaxis.isPickable = false;\r\n        this._bZaxis.isPickable = false;\r\n\r\n        this._bXaxis.parent = guideAxes;\r\n        this._bYaxis.parent = guideAxes;\r\n        this._bZaxis.parent = guideAxes;\r\n        this._bXaxis.color = Color3.Red();\r\n        this._bYaxis.color = Color3.Green();\r\n        this._bZaxis.color = Color3.Blue();\r\n        this._hideBaxis();\r\n\r\n        //the small axis\r\n        let al: number = this._axesLen * this._axesScale * 0.75;\r\n        this._xaxis = Mesh.CreateLines(\"xAxis\", [new Vector3(0, 0, 0), new Vector3(al, 0, 0)], this._scene);\r\n        this._yaxis = Mesh.CreateLines(\"yAxis\", [new Vector3(0, 0, 0), new Vector3(0, al, 0)], this._scene);\r\n        this._zaxis = Mesh.CreateLines(\"zAxis\", [new Vector3(0, 0, 0), new Vector3(0, 0, al)], this._scene);\r\n\r\n        //lines are now pickable too\r\n        this._xaxis.isPickable = false;\r\n        this._yaxis.isPickable = false;\r\n        this._zaxis.isPickable = false;\r\n\r\n        this._xaxis.parent = guideAxes;\r\n        this._yaxis.parent = guideAxes;\r\n        this._zaxis.parent = guideAxes;\r\n        this._xaxis.color = Color3.Red();\r\n        this._yaxis.color = Color3.Green();\r\n        this._zaxis.color = Color3.Blue();\r\n\r\n        this._xaxis.renderingGroupId = 1;\r\n        this._yaxis.renderingGroupId = 1;\r\n        this._zaxis.renderingGroupId = 1;\r\n\r\n        return guideAxes;\r\n    }\r\n\r\n    private _pickedPlane: Mesh;\r\n    private _pALL: Mesh;\r\n    private _pXZ: Mesh;\r\n    private _pZY: Mesh;\r\n    private _pYX: Mesh;\r\n\r\n    private _createPickPlanes() {\r\n        this._pALL = Mesh.CreatePlane(\"pALL\", 5, this._scene);\r\n        this._pXZ = Mesh.CreatePlane(\"pXZ\", 5, this._scene);\r\n        this._pZY = Mesh.CreatePlane(\"pZY\", 5, this._scene);\r\n        this._pYX = Mesh.CreatePlane(\"pYX\", 5, this._scene);\r\n\r\n        this._pALL.isPickable = false;\r\n        this._pXZ.isPickable = false;\r\n        this._pZY.isPickable = false;\r\n        this._pYX.isPickable = false;\r\n\r\n        this._pALL.visibility = 0;\r\n        this._pXZ.visibility = 0;\r\n        this._pZY.visibility = 0;\r\n        this._pYX.visibility = 0;\r\n\r\n        this._pALL.renderingGroupId = 1;\r\n        this._pXZ.renderingGroupId = 1;\r\n        this._pZY.renderingGroupId = 1;\r\n        this._pYX.renderingGroupId = 1;\r\n\r\n        this._pALL.lookAt(this._mainCamera.position);\r\n        this._pXZ.rotate(Axis.X, 1.57);\r\n        this._pZY.rotate(Axis.Y, 1.57);\r\n\r\n        let pickPlanes: Mesh = new Mesh(\"pickPlanes\", this._scene);\r\n        this._pALL.parent = pickPlanes;\r\n        this._pXZ.parent = pickPlanes;\r\n        this._pZY.parent = pickPlanes;\r\n        this._pYX.parent = pickPlanes;\r\n\r\n        return pickPlanes;\r\n\r\n\r\n    }\r\n\r\n    private _tCtl: Mesh;\r\n\r\n    private _tX: Mesh;\r\n    private _tY: Mesh;\r\n    private _tZ: Mesh;\r\n\r\n    private _tXZ: Mesh;\r\n    private _tZY: Mesh;\r\n    private _tYX: Mesh;\r\n\r\n    private _tAll: Mesh;\r\n\r\n    private _tEndX: Mesh;\r\n    private _tEndY: Mesh;\r\n    private _tEndZ: Mesh;\r\n    private _tEndXZ: Mesh;\r\n    private _tEndZY: Mesh;\r\n    private _tEndYX: Mesh;\r\n    private _tEndAll: Mesh;\r\n\r\n    private _createTransAxes() {\r\n        let r: number = this._pickWidth * 2 * this._axesScale;\r\n        let l: number = this._axesLen * this._axesScale;\r\n\r\n        this._tCtl = new Mesh(\"tarnsCtl\", this._scene);\r\n\r\n        //pickable invisible boxes around axes lines\r\n        this._tX = this._extrudeBox(r / 2, l);\r\n        this._tX.name = \"X\";\r\n        this._tY = this._tX.clone(\"Y\");\r\n        this._tZ = this._tX.clone(\"Z\");\r\n\r\n        this._tXZ = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, this._scene);\r\n        this._tZY = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, this._scene);\r\n        this._tYX = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, this._scene);\r\n        //this.tZY=this.tXZ.clone(\"ZY\");\r\n        //this.tYX=this.tXZ.clone(\"YX\");\r\n\r\n        this._tXZ.rotation.x = 1.57;\r\n        this._tZY.rotation.y = -1.57;\r\n\r\n        this._tXZ.position.x = r;\r\n        this._tXZ.position.z = r;\r\n\r\n        this._tZY.position.z = r;\r\n        this._tZY.position.y = r;\r\n\r\n        this._tYX.position.y = r;\r\n        this._tYX.position.x = r;\r\n\r\n        this._tXZ.bakeCurrentTransformIntoVertices();\r\n        this._tZY.bakeCurrentTransformIntoVertices();\r\n        this._tYX.bakeCurrentTransformIntoVertices();\r\n\r\n        this._tAll = Mesh.CreateBox(\"ALL\", r * 2, this._scene);\r\n\r\n        this._tX.parent = this._tCtl;\r\n        this._tY.parent = this._tCtl;\r\n        this._tZ.parent = this._tCtl;\r\n        this._tXZ.parent = this._tCtl;\r\n        this._tZY.parent = this._tCtl;\r\n        this._tYX.parent = this._tCtl;\r\n        this._tAll.parent = this._tCtl;\r\n\r\n        this._tX.rotation.y = 1.57;\r\n        this._tY.rotation.x -= 1.57;\r\n\r\n        this._tX.visibility = 0;\r\n        this._tY.visibility = 0;\r\n        this._tZ.visibility = 0;\r\n        this._tXZ.visibility = 0;\r\n        this._tZY.visibility = 0;\r\n        this._tYX.visibility = 0;\r\n        this._tAll.visibility = 0;\r\n\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._tX.isPickable = false;\r\n        this._tY.isPickable = false;\r\n        this._tZ.isPickable = false;\r\n        this._tXZ.isPickable = false;\r\n        this._tZY.isPickable = false;\r\n        this._tYX.isPickable = false;\r\n        this._tAll.isPickable = false;\r\n\r\n        //non pickable but visible cones at end of axes lines\r\n        //cone length\r\n        let cl: number = l / 5;\r\n        //cone base radius\r\n        let cr: number = r;\r\n        this._tEndX = Mesh.CreateCylinder(\"tEndX\", cl, 0, cr, 6, 1, this._scene);\r\n        this._tEndY = this._tEndX.clone(\"tEndY\");\r\n        this._tEndZ = this._tEndX.clone(\"tEndZ\");\r\n\r\n        this._tEndXZ = this._createTriangle(\"XZ\", cr * 1.75, this._scene);\r\n        this._tEndZY = this._tEndXZ.clone(\"ZY\");\r\n        this._tEndYX = this._tEndXZ.clone(\"YX\");\r\n\r\n        this._tEndAll = MeshBuilder.CreatePolyhedron(\"tEndAll\", { type: 1, size: cr / 2 }, this._scene);\r\n\r\n        this._tEndX.rotation.x = 1.57;\r\n        this._tEndY.rotation.x = 1.57;\r\n        this._tEndZ.rotation.x = 1.57;\r\n\r\n        this._tEndZY.rotation.z = 1.57;\r\n        this._tEndYX.rotation.x = -1.57;\r\n\r\n        this._tEndXZ.position.x = r;\r\n        this._tEndXZ.position.z = r;\r\n\r\n        this._tEndZY.position.z = r;\r\n        this._tEndZY.position.y = r;\r\n\r\n        this._tEndYX.position.y = r;\r\n        this._tEndYX.position.x = r;\r\n\r\n        this._tEndX.parent = this._tX;\r\n        this._tEndY.parent = this._tY;\r\n        this._tEndZ.parent = this._tZ;\r\n        this._tEndXZ.parent = this._tXZ;\r\n        this._tEndZY.parent = this._tZY;\r\n        this._tEndYX.parent = this._tYX;\r\n        this._tEndAll.parent = this._tAll;\r\n\r\n        this._tEndX.position.z = l - cl / 2;\r\n        this._tEndY.position.z = l - cl / 2;\r\n        this._tEndZ.position.z = l - cl / 2;\r\n\r\n        this._tEndX.material = this._redMat;\r\n        this._tEndY.material = this._greenMat;\r\n        this._tEndZ.material = this._blueMat;\r\n        this._tEndXZ.material = this._greenMat;\r\n        this._tEndZY.material = this._redMat;\r\n        this._tEndYX.material = this._blueMat;\r\n        this._tEndAll.material = this._yellowMat;\r\n\r\n        this._tEndX.renderingGroupId = 2;\r\n        this._tEndY.renderingGroupId = 2;\r\n        this._tEndZ.renderingGroupId = 2;\r\n        this._tEndXZ.renderingGroupId = 2;\r\n        this._tEndZY.renderingGroupId = 2;\r\n        this._tEndYX.renderingGroupId = 2;\r\n        this._tEndAll.renderingGroupId = 2;\r\n\r\n        this._tEndX.isPickable = false;\r\n        this._tEndY.isPickable = false;\r\n        this._tEndZ.isPickable = false;\r\n        this._tEndXZ.isPickable = false;\r\n        this._tEndZY.isPickable = false;\r\n        this._tEndYX.isPickable = false;\r\n        this._tEndAll.isPickable = false;\r\n    }\r\n\r\n    private _createTriangle(name: string, w: number, scene: Scene) {\r\n        let p: Path2 = new Path2(w / 2, -w / 2).addLineTo(w / 2, w / 2).addLineTo(-w / 2, w / 2).addLineTo(w / 2, -w / 2);\r\n        let s = new PolygonMeshBuilder(name, p, scene);\r\n        let t = s.build();\r\n        return t;\r\n    }\r\n\r\n    private _rCtl: Mesh;\r\n\r\n    private _rX: Mesh;\r\n    private _rY: Mesh;\r\n    private _rZ: Mesh;\r\n    private _rAll: Mesh;\r\n\r\n    private _rEndX: LinesMesh;\r\n    private _rEndY: LinesMesh;\r\n    private _rEndZ: LinesMesh;\r\n    private _rEndAll: LinesMesh;\r\n    private _rEndAll2: LinesMesh;\r\n\r\n    private _guideSize: number = 180;\r\n\r\n    public setRotGuideFull(y: boolean) {\r\n        if (y) this._guideSize = 360;\r\n        else this._guideSize = 180;\r\n        if (this._rCtl != null) {\r\n            this._rCtl.dispose();\r\n            this._rAll.dispose();\r\n            this._rCtl = null;\r\n            this.enableRotation();\r\n        }\r\n    }\r\n\r\n    private _createRotAxes() {\r\n        let d: number = this._axesLen * this._axesScale * 2;\r\n        this._rCtl = new Mesh(\"rotCtl\", this._scene);\r\n\r\n        //pickable invisible torus around the rotation circles\r\n        this._rX = this._createTube(d / 2, this._guideSize);\r\n        this._rX.name = \"X\";\r\n\r\n        this._rY = this._createTube(d / 2, this._guideSize);\r\n        this._rY.name = \"Y\";\r\n\r\n        this._rZ = this._createTube(d / 2, this._guideSize);\r\n        this._rZ.name = \"Z\";\r\n\r\n        this._rAll = this._createTube(d / 1.75, 360);\r\n        this._rAll.name = \"ALL\";\r\n\r\n        this._rX.rotation.z = 1.57;\r\n        this._rZ.rotation.x = -1.57;\r\n        this._rX.bakeCurrentTransformIntoVertices();\r\n        this._rZ.bakeCurrentTransformIntoVertices();\r\n\r\n        this._rAll.rotation.x = 1.57;\r\n\r\n        this._rX.parent = this._rCtl;\r\n        this._rY.parent = this._rCtl;\r\n        this._rZ.parent = this._rCtl;\r\n        this._rAll.parent = this._pALL;\r\n\r\n        this._rX.visibility = 0;\r\n        this._rY.visibility = 0;\r\n        this._rZ.visibility = 0;\r\n        this._rAll.visibility = 0;\r\n\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._rX.isPickable = false;\r\n        this._rY.isPickable = false;\r\n        this._rZ.isPickable = false;\r\n        this._rAll.isPickable = false;\r\n\r\n        //non pickable but visible circles\r\n        let cl: number = d;\r\n        this._rEndX = this._createCircle(cl / 2, this._guideSize, false);\r\n        this._rEndY = this._rEndX.clone(\"\");\r\n        this._rEndZ = this._rEndX.clone(\"\");\r\n        this._rEndAll = this._createCircle(cl / 1.75, 360, false);\r\n        this._rEndAll2 = this._createCircle(cl / 2, 360, false);\r\n\r\n        this._rEndX.parent = this._rX;\r\n        this._rEndY.parent = this._rY;\r\n        this._rEndZ.parent = this._rZ;\r\n\r\n        this._rEndX.rotation.z = 1.57;\r\n        this._rEndZ.rotation.x = -1.57;\r\n\r\n        this._rEndAll.parent = this._rAll;\r\n        this._rEndAll2.parent = this._rAll;\r\n\r\n\r\n        this._rEndX.color = Color3.Red();\r\n        this._rEndY.color = Color3.Green();\r\n        this._rEndZ.color = Color3.Blue();\r\n        this._rEndAll.color = Color3.Yellow();\r\n        this._rEndAll2.color = Color3.Gray();\r\n\r\n        this._rEndX.renderingGroupId = 2;\r\n        this._rEndY.renderingGroupId = 2;\r\n        this._rEndZ.renderingGroupId = 2;\r\n        this._rEndAll.renderingGroupId = 2;\r\n        this._rEndAll2.renderingGroupId = 2;\r\n\r\n        this._rEndX.isPickable = false;\r\n        this._rEndY.isPickable = false;\r\n        this._rEndZ.isPickable = false;\r\n        this._rEndAll.isPickable = false;\r\n        this._rEndAll2.isPickable = false;\r\n    }\r\n\r\n    private _extrudeBox(w: number, l: number): Mesh {\r\n        let shape: Vector3[] = [new Vector3(w, w, 0), new Vector3(-w, w, 0), new Vector3(-w, -w, 0), new Vector3(w, -w, 0), new Vector3(w, w, 0)];\r\n        let path: Vector3[] = [new Vector3(0, 0, 0), new Vector3(0, 0, l)];\r\n        let box: Mesh = Mesh.ExtrudeShape(\"\", shape, path, 1, 0, 2, this._scene);\r\n        return box;\r\n    }\r\n\r\n    private _createCircle(r: number, t: number, double: boolean): LinesMesh {\r\n        if (t === null) t = 360;\r\n        let points: Vector3[] = [];\r\n        let x: number;\r\n        let z: number;\r\n        let a: number = 3.14 / 180;\r\n        let p: number = 0;\r\n        for (let i: number = 0; i <= t; i = i + 5) {\r\n            x = r * Math.cos(i * a);\r\n            if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n            points[p] = new Vector3(x, 0, z);\r\n            p++;\r\n        }\r\n        if (double) {\r\n            r = r - 0.04;\r\n            for (let i: number = 0; i <= t; i = i + 5) {\r\n                x = r * Math.cos(i * a);\r\n                if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n                points[p] = new Vector3(x, 0, z);\r\n                p++;\r\n            }\r\n        }\r\n        let circle: LinesMesh = Mesh.CreateLines(\"\", points, this._scene);\r\n        return circle;\r\n    }\r\n\r\n    private _createTube(r: number, t?: number): Mesh {\r\n        if (t === null) t = 360;\r\n        let points: Vector3[] = [];\r\n        let x: number;\r\n        let z: number;\r\n        let a: number = 3.14 / 180;\r\n        let p: number = 0;\r\n        for (let i: number = 0; i <= t; i = i + 30) {\r\n            x = r * Math.cos(i * a);\r\n            if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n            points[p] = new Vector3(x, 0, z);\r\n            p++;\r\n        }\r\n        let tube: Mesh = Mesh.CreateTube(\"\", points, this._pickWidth * this._axesScale * 2, 3, null, Mesh.NO_CAP, this._scene);\r\n        return tube;\r\n    }\r\n\r\n\r\n    private _sCtl: Mesh;\r\n    private _sX: Mesh;\r\n    private _sY: Mesh;\r\n    private _sZ: Mesh;\r\n    private _sXZ: Mesh;\r\n    private _sZY: Mesh;\r\n    private _sYX: Mesh;\r\n    private _sAll: Mesh;\r\n\r\n    private _sEndX: Mesh;\r\n    private _sEndY: Mesh;\r\n    private _sEndZ: Mesh;\r\n    private _sEndXZ: Mesh;\r\n    private _sEndZY: Mesh;\r\n    private _sEndYX: Mesh;\r\n    private _sEndAll: Mesh;\r\n\r\n\r\n    private _createScaleAxes() {\r\n        let r: number = this._pickWidth * 2 * this._axesScale;\r\n        let l: number = this._axesLen * this._axesScale;\r\n\r\n        this._sCtl = new Mesh(\"sCtl\", this._scene);\r\n\r\n        //pickable , invisible part\r\n        this._sX = this._extrudeBox(r / 2, l);\r\n        this._sX.name = \"X\";\r\n        this._sY = this._sX.clone(\"Y\");\r\n        this._sZ = this._sX.clone(\"Z\");\r\n\r\n        this._sXZ = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, this._scene);\r\n        this._sZY = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, this._scene);\r\n        this._sYX = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, this._scene);\r\n        //this.sZY=this.sXZ.clone(\"ZY\");\r\n        //this.sYX=this.sXZ.clone(\"YX\");\r\n\r\n        this._sXZ.rotation.x = 1.57;\r\n        this._sZY.rotation.y = -1.57;\r\n\r\n        this._sXZ.position.x = r;\r\n        this._sXZ.position.z = r;\r\n\r\n        this._sZY.position.z = r;\r\n        this._sZY.position.y = r;\r\n\r\n        this._sYX.position.y = r;\r\n        this._sYX.position.x = r;\r\n\r\n        this._sXZ.bakeCurrentTransformIntoVertices();\r\n        this._sZY.bakeCurrentTransformIntoVertices();\r\n        this._sYX.bakeCurrentTransformIntoVertices();\r\n\r\n        this._sAll = Mesh.CreateBox(\"ALL\", r * 2, this._scene);\r\n\r\n        this._sX.parent = this._sCtl;\r\n        this._sY.parent = this._sCtl;\r\n        this._sZ.parent = this._sCtl;\r\n        this._sAll.parent = this._sCtl;\r\n        this._sXZ.parent = this._sCtl;\r\n        this._sZY.parent = this._sCtl;\r\n        this._sYX.parent = this._sCtl;\r\n\r\n        this._sX.rotation.y = 1.57;\r\n        this._sY.rotation.x -= 1.57;\r\n\r\n        this._sX.visibility = 0;\r\n        this._sY.visibility = 0;\r\n        this._sZ.visibility = 0;\r\n        this._sXZ.visibility = 0;\r\n        this._sZY.visibility = 0;\r\n        this._sYX.visibility = 0;\r\n        this._sAll.visibility = 0;\r\n\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._sX.isPickable = false;\r\n        this._sY.isPickable = false;\r\n        this._sZ.isPickable = false;\r\n        this._sXZ.isPickable = false;\r\n        this._sZY.isPickable = false;\r\n        this._sYX.isPickable = false;\r\n        this._sAll.isPickable = false;\r\n\r\n        //non pickable visible boxes at end of axes\r\n        let cr: number = r;\r\n        this._sEndX = Mesh.CreateBox(\"\", cr, this._scene);\r\n        this._sEndY = this._sEndX.clone(\"\");\r\n        this._sEndZ = this._sEndX.clone(\"\");\r\n\r\n        this._sEndXZ = this._createTriangle(\"XZ\", cr * 1.75, this._scene);\r\n        this._sEndZY = this._sEndXZ.clone(\"ZY\");\r\n        this._sEndYX = this._sEndXZ.clone(\"YX\");\r\n\r\n        this._sEndAll = MeshBuilder.CreatePolyhedron(\"sEndAll\", { type: 1, size: cr / 2 }, this._scene);\r\n\r\n        this._sEndZY.rotation.z = 1.57;\r\n        this._sEndYX.rotation.x = -1.57;\r\n\r\n        this._sEndXZ.position.x = r;\r\n        this._sEndXZ.position.z = r;\r\n\r\n        this._sEndZY.position.z = r;\r\n        this._sEndZY.position.y = r;\r\n\r\n        this._sEndYX.position.y = r;\r\n        this._sEndYX.position.x = r;\r\n\r\n        this._sEndX.parent = this._sX;\r\n        this._sEndY.parent = this._sY;\r\n        this._sEndZ.parent = this._sZ;\r\n        this._sEndXZ.parent = this._sXZ;\r\n        this._sEndZY.parent = this._sZY;\r\n        this._sEndYX.parent = this._sYX;\r\n        this._sEndAll.parent = this._sAll;\r\n\r\n        this._sEndX.position.z = l - cr / 2;\r\n        this._sEndY.position.z = l - cr / 2;\r\n        this._sEndZ.position.z = l - cr / 2;\r\n\r\n        this._sEndX.material = this._redMat;\r\n        this._sEndY.material = this._greenMat;\r\n        this._sEndZ.material = this._blueMat;\r\n        this._sEndXZ.material = this._greenMat;\r\n        this._sEndZY.material = this._redMat;\r\n        this._sEndYX.material = this._blueMat;\r\n        this._sEndAll.material = this._yellowMat;\r\n\r\n        this._sEndX.renderingGroupId = 2;\r\n        this._sEndY.renderingGroupId = 2;\r\n        this._sEndZ.renderingGroupId = 2;\r\n        this._sEndXZ.renderingGroupId = 2;\r\n        this._sEndZY.renderingGroupId = 2;\r\n        this._sEndYX.renderingGroupId = 2;\r\n        this._sEndAll.renderingGroupId = 2;\r\n\r\n        this._sEndX.isPickable = false;\r\n        this._sEndY.isPickable = false;\r\n        this._sEndZ.isPickable = false;\r\n        this._sEndXZ.isPickable = false;\r\n        this._sEndZY.isPickable = false;\r\n        this._sEndYX.isPickable = false;\r\n        this._sEndAll.isPickable = false;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * checks if a have left hand , right hand issue.\r\n     * In other words if a mesh is a LHS mesh in RHS system or \r\n     * a RHS mesh in LHS system\r\n     * The X axis will be reversed in such cases.\r\n     * thus Cross product of X and Y should be inverse of Z.\r\n     * \r\n     */\r\n    private _check_LHS_RHS(mesh: Mesh) {\r\n        let actualZ = Vector3.Cross(this._localX, this._localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, this._localZ) < 0) return true;\r\n        else return false;\r\n    }\r\n\r\n    /**\r\n     * set how transparent the axes are\r\n     * 0 to 1\r\n     * 0 - completely transparent\r\n     * 1 - completely non transparent\r\n     * default is 0.75\r\n     */\r\n    public setVisibility(v: number) {\r\n        this._visibility = v;\r\n    }\r\n    public setLocal(l: boolean) {\r\n        if (this._local == l) return;\r\n        this._local = l;\r\n        if (!l) {\r\n            this._ecRoot.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n    }\r\n\r\n    public isLocal(): boolean {\r\n        return this._local;\r\n    }\r\n\r\n    public setTransSnap(s: boolean) {\r\n        this._snapT = s;\r\n    }\r\n\r\n    public setRotSnap(s: boolean) {\r\n        this._snapR = s;\r\n    }\r\n\r\n    public setScaleSnap(s: boolean) {\r\n        this._snapS = s;\r\n    }\r\n\r\n    private _tSnap: Vector3 = new Vector3(this._transSnap, this._transSnap, this._transSnap);\r\n    public setTransSnapValue(t: number) {\r\n        this._tSnap.copyFromFloats(t, t, t);\r\n        this._transSnap = t;\r\n    }\r\n\r\n    public setRotSnapValue(r: number) {\r\n        this._rotSnap = r;\r\n    }\r\n\r\n    /**\r\n     * use this to set the scale snap value\r\n     */\r\n    public setScaleSnapValue(r: number) {\r\n        this._scaleSnap = r;\r\n    }\r\n\r\n    //few temp vectors & matrix\r\n    private _tv1: Vector3 = new Vector3(0, 0, 0);\r\n    private _tv2: Vector3 = new Vector3(0, 0, 0);\r\n    private _tv3: Vector3 = new Vector3(0, 0, 0);\r\n    private _tm: Matrix = new Matrix();\r\n    private _getAngle2(p1: Vector3, p2: Vector3, cameraPos: Vector3, c2ec: Vector3, mN: Vector3): number {\r\n        /**\r\n         * A) find out if the camera is above , below, left, right of the rotation plane\r\n         */\r\n        //project \"camera to ec\" vector onto mesh normal to get distance to rotation plane\r\n        let d: number = Vector3.Dot(c2ec, mN);\r\n        //scale mesh normal by above ammount to get vector to rotation plane\r\n        mN.scaleToRef(d, this._tv1);\r\n        //get the point of intersection of vector from camera perpendicular to rotation plane\r\n        cameraPos.addToRef(this._tv1, this._tv2);\r\n        let i: Vector3 = this._tv2;//save some typing\r\n        //find the co-ordinate of this point in the cameras frame of reference\r\n        this._mainCamera.getWorldMatrix().invertToRef(this._tm);\r\n        Vector3.TransformCoordinatesToRef(this._tv2, this._tm, this._tv2);\r\n        //find in which quadarant the point (and thus the rotation plane) is in the camera xy plane\r\n        let q: number = 0; //(1=x y,2=-x y,3=-x -y,4=x -y)\r\n        if (i.x >= 0 && i.y >= 0) q = 1;\r\n        else if (i.x <= 0 && i.y >= 0) q = 2;\r\n        else if (i.x <= 0 && i.y <= 0) q = 3;\r\n        else if (i.x >= 0 && i.y <= 0) q = 4;\r\n\r\n        /**\r\n         * B) find out if the user moved pointer up,down, right, left\r\n         */\r\n\r\n        //find movement vector in camera frame of reference\r\n        Vector3.TransformCoordinatesToRef(p1, this._tm, this._tv1);\r\n        Vector3.TransformCoordinatesToRef(p2, this._tm, this._tv2);\r\n        this._tv2.subtractInPlace(this._tv1);\r\n        let mv: Vector3 = this._tv2; //save some typing\r\n        //for now lets set the angle magnitutde same as amount by which the mouse moved\r\n        let angle: number = mv.length();\r\n\r\n        let m: String = \"\";//(u ,d ,r,l)\r\n        if (mv.x >= 0 && mv.y >= 0) {\r\n            if (mv.x >= mv.y) m = \"r\"; else m = \"u\";\r\n        } else if (mv.x <= 0 && mv.y >= 0) {\r\n            if (-mv.x >= mv.y) m = \"l\"; else m = \"u\";\r\n        } else if (mv.x <= 0 && mv.y <= 0) {\r\n            if (-mv.x >= -mv.y) m = \"l\"; else m = \"d\";\r\n        } else if (mv.x >= 0 && mv.y <= 0) {\r\n            if (mv.x >= -mv.y) m = \"r\"; else m = \"d\";\r\n        }\r\n\r\n        /**\r\n         * C) decide if the user was trying to rotate clockwise (+1) or anti-clockwise(-1)\r\n         */\r\n\r\n        let r: number = 0;\r\n        //if mouse moved down /up and rotation plane is on  right or left side of user\r\n        if (m == \"d\") {\r\n            if (q == 1 || q == 4) r = 1;\r\n            else r = -1;\r\n        } else if (m == \"u\") {\r\n            if (q == 1 || q == 4) r = -1;\r\n            else r = 1;\r\n            //if mouse moved right/left and  rotation plane is above or below user\r\n        } else if (m == \"r\") {\r\n            if (q == 2 || q == 1) r = 1;\r\n            else r = -1;\r\n        } else if (m == \"l\") {\r\n            if (q == 2 || q == 1) r = -1;\r\n            else r = 1;\r\n        }\r\n\r\n        return r * angle;\r\n    }\r\n\r\n    /**\r\n     * finds the angle subtended from points p1 to p2 around the point p\r\n     * checks if the user was trying to rotate clockwise (+ve in LHS) or anticlockwise (-ve in LHS)\r\n     * to figure this check the orientation of the user(camera)to ec vector with the rotation normal vector\r\n     */\r\n    private _getAngle(p1: Vector3, p2: Vector3, p: Vector3, c2ec: Vector3): number {\r\n        p1.subtractToRef(p, this._tv1);\r\n        p2.subtractToRef(p, this._tv2);\r\n        Vector3.CrossToRef(this._tv1, this._tv2, this._tv3);\r\n        let angle: number = Math.asin(this._tv3.length() / (this._tv1.length() * this._tv2.length()));\r\n        //camera looking down from front of plane or looking up from behind plane\r\n        if ((Vector3.Dot(this._tv3, c2ec) > 0)) {\r\n            angle = -1 * angle;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n\r\n    private _createMaterials(scene: Scene) {\r\n        this._redMat = EditControl._getStandardMaterial(\"redMat\", Color3.Red(), scene);\r\n        this._greenMat = EditControl._getStandardMaterial(\"greenMat\", Color3.Green(), scene);\r\n        this._blueMat = EditControl._getStandardMaterial(\"blueMat\", Color3.Blue(), scene);\r\n        this._whiteMat = EditControl._getStandardMaterial(\"whiteMat\", Color3.White(), scene);\r\n        this._yellowMat = EditControl._getStandardMaterial(\"whiteMat\", Color3.Yellow(), scene);\r\n    }\r\n\r\n    private _disposeMaterials() {\r\n        this._redMat.dispose();\r\n        this._greenMat.dispose();\r\n        this._blueMat.dispose();\r\n        this._whiteMat.dispose();\r\n        this._yellowMat.dispose();\r\n    }\r\n\r\n    private static _getStandardMaterial(name: string, col: Color3, scene: Scene): StandardMaterial {\r\n        let mat: StandardMaterial = new StandardMaterial(name, scene);\r\n        mat.emissiveColor = col;\r\n        mat.diffuseColor = Color3.Black();\r\n        mat.specularColor = Color3.Black();\r\n        mat.backFaceCulling = false;\r\n        return mat;\r\n    }\r\n}\r\n\r\nclass ActHist {\r\n    private mesh: AbstractMesh;\r\n\r\n    private lastMax: number = 10;\r\n\r\n    private acts: Array<Act> = new Array<Act>();\r\n\r\n    private last: number = -1;\r\n\r\n    private current: number = -1;\r\n\r\n    public constructor(mesh: AbstractMesh, capacity: number) {\r\n        this.mesh = mesh;\r\n        this.lastMax = capacity - 1;\r\n        this.add();\r\n    }\r\n\r\n    public setCapacity(c: number) {\r\n        if ((c == 0)) {\r\n            console.error(\"capacity should be more than zero\");\r\n            return;\r\n        }\r\n        this.lastMax = c - 1;\r\n        this.last = -1;\r\n        this.current = -1;\r\n        this.acts = new Array<Act>();\r\n        this.add();\r\n    }\r\n\r\n    public add(at?: number) {\r\n        if (at === undefined) at = null;\r\n        let act: Act = new Act(this.mesh, at);\r\n        if ((this.current < this.last)) {\r\n            this.acts.splice(this.current + 1);\r\n            this.last = this.current;\r\n        }\r\n        if ((this.last == this.lastMax)) {\r\n            this.acts.shift();\r\n            this.acts.push(act);\r\n        } else {\r\n            this.acts.push(act);\r\n            this.last++;\r\n            this.current++;\r\n        }\r\n    }\r\n\r\n    public undo(): number {\r\n        if ((this.current > 0)) {\r\n            let at: number = (<Act>this.acts[this.current]).getActionType()\r\n            this.current--;\r\n            (<Act>this.acts[this.current]).perform(this.mesh);\r\n            return at;\r\n        }\r\n    }\r\n\r\n    public redo() {\r\n        if ((this.current < this.last)) {\r\n            this.current++;\r\n            (<Act>this.acts[this.current]).perform(this.mesh);\r\n            return (<Act>this.acts[this.current]).getActionType()\r\n        }\r\n    }\r\n}\r\n\r\nclass Act {\r\n    private _p: Vector3;\r\n\r\n    private _rQ: Quaternion;\r\n    private _rE: Vector3;\r\n\r\n    private _s: Vector3;\r\n\r\n    //actiontype\r\n    private _at: number;\r\n\r\n    public constructor(mesh: AbstractMesh, at: number) {\r\n        this._p = mesh.position.clone();\r\n        //if (mesh.rotationQuaternion == null) {\r\n        if (mesh.rotationQuaternion == null) {\r\n            this._rQ = null;\r\n            this._rE = mesh.rotation.clone();\r\n        } else {\r\n            this._rQ = mesh.rotationQuaternion.clone();\r\n            this._rE = null;\r\n        }\r\n        this._s = mesh.scaling.clone();\r\n        this._at = at;\r\n    }\r\n\r\n    public getActionType(): number {\r\n        return this._at;\r\n    }\r\n\r\n    public perform(mesh: AbstractMesh) {\r\n        mesh.position.copyFrom(this._p)\r\n        //check if we are doing euler or quaternion now\r\n        //also check what were we doing when the rotation value\r\n        //was captured and set value accordingly\r\n        if (mesh.rotationQuaternion == null) {\r\n            if (this._rE != null) {\r\n                //mesh.rotation = this.rE.clone();\r\n                mesh.rotation.copyFrom(this._rE);\r\n            } else {\r\n                //mesh.rotation = this.r.toEulerAngles();\r\n                mesh.rotation.copyFrom(this._rQ.toEulerAngles());\r\n            }\r\n        } else {\r\n            if (this._rQ != null) {\r\n                mesh.rotationQuaternion.copyFrom(this._rQ);\r\n            } else {\r\n                //TODO use BABYLON.Quaternion.RotationYawPitchRoll(rot.y, rot.x, rot.z) instead of toQuaternion.\r\n                //mesh.rotationQuaternion.copyFrom(this.rE.toQuaternion());\r\n                mesh.rotationQuaternion.copyFrom(Quaternion.RotationYawPitchRoll(this._rE.y, this._rE.x, this._rE.z));\r\n            }\r\n        }\r\n        mesh.scaling.copyFrom(this._s);\r\n    }\r\n}\r\n"],"sourceRoot":""}