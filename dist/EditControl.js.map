{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/EditControl.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","EditControl","ActionType","babylonjs__WEBPACK_IMPORTED_MODULE_0__","mesh","camera","canvas","scale","eulerian","pickWidth","_this","this","_local","_snapT","_snapR","_transSnap","_rotSnap","Math","PI","_axesLen","_axesScale","_pickWidth","_redCol","_greenCol","_blueCol","_whiteCol","_yellowCol","_visibility","_ecMatrix","_ecTOcamera","_distFromCamera","_cameraTOec","_cameraNormal","_prevState","_hidden","_actionListener","_actionStartListener","_actionEndListener","_pDown","_pointerIsOver","_editing","_rotate2","_transBy","_snapTV","_snapS","_snapSV","_scaleSnap","_scale","_localX","_localY","_localZ","_eulerian","_snapRA","_transEnabled","_rotEnabled","_scaleEnabled","_guideSize","_tSnap","_tv1","_tv2","_tv3","_tm","_mesh","_mainCamera","_canvas","_checkQuaternion","_scene","getScene","_actHist","ActHist","computeWorldMatrix","_boundingDimesion","_getBoundingDimension","_setLocalAxes","_ecRoot","rotationQuaternion","Identity","visibility","isPickable","_createMaterials","_createCommonAxes","parent","_createPickPlanes","_pointerdown","evt","_onPointerDown","_pointerup","_onPointerUp","_pointermove","_onPointerMove","addEventListener","_renderer","_renderLoopProcess","registerBeforeRender","undefined","position","getAbsolutePivotPoint","_setECRotation","_setECScale","getWorldMatrix","invertToRef","TransformCoordinatesToRef","_pALL","lookAt","LOCAL","subtractToRef","WORLD","_rotRotGuides","_rotPlanarGuides","_tXZ","_tZY","_tYX","_sXZ","_sZY","_sYX","rot","rotation","RotationYawPitchRollToRef","y","x","z","copyFrom","_isScaleUnEqual","getRotationMatrixToRef","FromRotationMatrixToRef","scaling","FromFloatArrayToRef","asArray","parentOnNormal","Dot","length","abs","FromFloatsToRef","rotX","atan","_rX","rotY","_rY","rotZ","_rZ","XZ","ZY","YX","ec","switchTo","refreshBoundingInfo","setUndoCount","setCapacity","undo","at","_callActionStartListener","_callActionListener","_callActionEndListener","redo","detach","removeEventListener","unregisterBeforeRender","removeAllActionListeners","_disposeAll","hide","disableTranslation","disableRotation","disableScaling","_hideCommonAxes","_xaxis","_yaxis","_zaxis","_showCommonAxes","show","enableTranslation","enableRotation","enableScaling","isHidden","dispose","_disposeMaterials","addActionListener","actionListener","removeActionListener","addActionStartListener","actionStartListener","removeActionStartListener","addActionEndListener","actionEndListener","removeActionEndListener","preventDefault","button","pickResult","pick","pointerX","pointerY","_tX","_tY","_tZ","_tAll","_rAll","_sX","_sY","_sZ","_sAll","hit","_axisPicked","pickedMesh","childs","getChildren","name_1","_bXaxis","_bYaxis","_bZaxis","_setEditing","_pickedPlane","_getPickPlane","_prevPos","_getPosOnPickPlane","setTimeout","cam","can","_detachCamera","editing","_setActionType","_actionType","ROT","isEditing","detachControl","isPointerOver","_onPointerOver","_prevOverMesh","_clearPrevOverMesh","_savedCol","color","_savedMat","material","_whiteMat","_restoreColor","attachControl","_hideBaxis","add","TRANS","SCALE","newPos","_doRotation","diff","subtract","_doTranslation","_doScaling","axis","_pXZ","_pZY","_pYX","_transWithSnap","_transBoundsMin","max","_transBoundsMax","min","trans","local","snapit","addInPlace","normalizeToRef","translate","setAbsolutePosition","absolutePosition","bbd","upVector","copyFromFloats","inPlane","_scaleWithSnap","_scaleBoundsMin","_scaleBoundsMax","meshMatrix","bb","getBoundingInfo","boundingBox","bd","maximum","minimum","prevPos","rAxis","angle","X","Y","Z","_getAngle2","useRightHandedSystem","_getAngle","normalize","rotate","toEulerAngles","pickinfo","pickedPoint","getRotationQuaternion","getPosition","isTranslationEnabled","_createTransAxes","_tCtl","_setVisibility","_all_tEnd","isRotationEnabled","returnEuler","euler","_rCtl","_createRotAxes","_all_rEnd","isScalingEnabled","_createScaleAxes","_sCtl","_all_sEnd","setScaleBounds","removeScaleBounds","setTransBounds","removeTransBounds","setRotBounds","_rotBoundsMin","_rotBoundsMax","removeRotBounds","guideAxes","CreateLines","al","renderingGroupId","CreatePlane","pickPlanes","_createPickableTrans","_createNonPickableTrans","tCtl","scene","tX","_extrudeBox","tY","clone","tZ","tXZ","size","tZY","tYX","bakeCurrentTransformIntoVertices","tAll","CreateBox","_all_t","_setPickableFalse","cl","tEndX","CreateCylinder","tEndY","tEndZ","tEndXZ","tEndZY","tEndYX","tEndAll","_redMat","_greenMat","_blueMat","_yellowMat","_tEndX","_tEndY","_tEndZ","_tEndXZ","_tEndZY","_tEndYX","_tEndAll","_setRenderingGroup","setRotGuideFull","_createPickableRot","_createNonPickableRot","rCtl","rX","_createTube","rY","rZ","rAll","_all_r","rEndX","_createCircle","rEndY","rEndZ","rEndAll","rEndAll2","Gray","_rEndX","_rEndY","_rEndZ","_rEndAll","_rEndAll2","meshes","v","map","w","shape","path","ExtrudeShape","double","points","cos","sin","CreateTube","NO_CAP","_createPickableScale","_createNonPickableScale","sCtl","sX","sY","sZ","sXZ","sZY","sYX","sAll","_all_s","sEndX","sEndY","sEndZ","sEndXZ","sEndZY","sEndYX","sEndAll","_sEndX","_sEndY","_sEndZ","_sEndXZ","_sEndZY","_sEndYX","_sEndAll","setVisibility","setLocal","isLocal","setTransSnap","setRotSnap","setScaleSnap","setTransSnapValue","setRotSnapValue","setScaleSnapValue","p1","p2","cameraPos","c2ec","mN","scaleToRef","addToRef","q","subtractInPlace","mv","CrossToRef","asin","_getStandardMaterial","col","mat","emissiveColor","diffuseColor","Black","specularColor","backFaceCulling","capacity","lastMax","acts","Array","last","current","console","error","act","Act","splice","shift","push","getActionType","perform","_p","_rQ","_rE","_s","_at","RotationYawPitchRoll"],"mappings":"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","file":"EditControl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\r\nimport {\r\n    AbstractMesh,\r\n    Axis,\r\n    BoundingBox,\r\n    Camera,\r\n    Color3,\r\n    LinesMesh,\r\n    Material,\r\n    Matrix, \r\n    Mesh, \r\n    MeshBuilder, \r\n    Node, \r\n    PickingInfo, \r\n    Quaternion, \r\n    Scene, \r\n    Space, \r\n    StandardMaterial, \r\n    Vector3\r\n}\r\n    from 'babylonjs';\r\n    \r\n\r\n\r\nenum ActionType {\r\n    TRANS = 0,\r\n    ROT = 1,\r\n    SCALE = 2\r\n}\r\n\r\n/**\r\n * Draws a transform widget at the mesh's location (its pivot location).\r\n * The widget transforms(translates,rotates and scales) the mesh based on user\r\n * interactions with the widget.\r\n * The widget shows the mesh position and rotation at any time. \r\n * The widget follows the mesh constantly. \r\n * Note: An alternate approach would have been for the mesh to follow the widget.\r\n * The problem with the alternate approach - syncing the transforms\r\n * if the mesh was being transformed by entities other than the widget say physics \r\n * or script for example.\r\n * \r\n */\r\n\r\nexport class EditControl {\r\n    private _mesh: Mesh;\r\n\r\n    private _canvas: HTMLCanvasElement;\r\n    private _scene: Scene;\r\n    private _mainCamera: Camera;\r\n    //root of the edit control\r\n    private _ecRoot: Mesh;\r\n    private _local: boolean = true;\r\n    private _snapT: boolean = false;\r\n    private _snapR: boolean = false;\r\n    private _transSnap: number = 1;\r\n    private _rotSnap: number = Math.PI / 18;\r\n    private _axesLen: number = 0.4;\r\n    private _axesScale: number = 1;\r\n    //how close to an axis should we get before we can pick it \r\n    private _pickWidth: number = 0.02;\r\n    private _redMat: StandardMaterial;\r\n    private _greenMat: StandardMaterial;\r\n    private _blueMat: StandardMaterial;\r\n    private _whiteMat: StandardMaterial;\r\n    private _yellowMat: StandardMaterial;\r\n    private _redCol:Color3=new Color3(1,0.2,0.2);\r\n    private _greenCol:Color3=new Color3(0.2,1,0.2);\r\n    private _blueCol:Color3=new Color3(0.2,0.2,1);\r\n    private _whiteCol:Color3=new Color3(1,1,1);\r\n    private _yellowCol:Color3=new Color3(1,1,0.2);\r\n    \r\n    private _actHist: ActHist;\r\n    private _renderer: () => void;\r\n    private _pointerdown: EventListener;\r\n    private _pointerup: EventListener;\r\n    private _pointermove: EventListener;\r\n    //axes visibility\r\n    private _visibility: number = 0.75;\r\n\r\n    //lhs-rhs issue. lhs mesh in rhs or rhs mesh in lhs\r\n    //private lhsRhs: boolean=false;\r\n\r\n    public constructor(mesh: Mesh, camera: Camera, canvas: HTMLCanvasElement, scale?: number, eulerian?: boolean, pickWidth?: number) {\r\n\r\n        this._mesh = mesh;\r\n        this._mainCamera = camera;\r\n        this._canvas = canvas;\r\n\r\n        if (scale != null) {\r\n            this._axesScale = scale;\r\n        }\r\n\r\n        if (eulerian !== null) {\r\n            this._eulerian = eulerian;\r\n        } else {\r\n            this._eulerian = false;\r\n        }\r\n        this._checkQuaternion();\r\n\r\n        if (pickWidth != null) {\r\n            this._pickWidth = pickWidth;\r\n        }\r\n\r\n        this._scene = mesh.getScene();\r\n        this._actHist = new ActHist(mesh, 10);\r\n\r\n        mesh.computeWorldMatrix(true);\r\n        this._boundingDimesion = this._getBoundingDimension(mesh);\r\n        this._setLocalAxes(mesh);\r\n        //this.lhsRhs=this.check_LHS_RHS(mesh);\r\n\r\n        //build the edit control axes\r\n        this._ecRoot = new Mesh(\"\", this._scene);\r\n        this._ecRoot.rotationQuaternion = Quaternion.Identity();\r\n        this._ecRoot.visibility = 0;\r\n        this._ecRoot.isPickable = false;\r\n\r\n        this._createMaterials(this._scene);\r\n\r\n        let guideAxes: Mesh = this._createCommonAxes();\r\n        guideAxes.parent = this._ecRoot;\r\n\r\n        //build the pickplanes\r\n        let pickPlanes: Mesh = this._createPickPlanes();\r\n        pickPlanes.parent = this._ecRoot;\r\n\r\n        this._pointerdown = (evt) => { return this._onPointerDown(evt) };\r\n        this._pointerup = (evt) => { return this._onPointerUp(evt) };\r\n        this._pointermove = (evt) => { return this._onPointerMove(evt) };\r\n\r\n        //use canvas rather than scene to handle pointer events\r\n        //scene cannot have mutiple eventlisteners for an event\r\n        //with canvas one will have to do ones own pickinfo generattion.\r\n\r\n        canvas.addEventListener(\"pointerdown\", this._pointerdown, false);\r\n        canvas.addEventListener(\"pointerup\", this._pointerup, false);\r\n        canvas.addEventListener(\"pointermove\", this._pointermove, false);\r\n\r\n\r\n        this._renderer = () => { return this._renderLoopProcess() };\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    //make sure that if eulerian is set to false then mesh's rotation is in quaternion\r\n    //throw error and exit if not so.\r\n    private _checkQuaternion() {\r\n        if (!this._eulerian) {\r\n            if ((this._mesh.rotationQuaternion == null) || (this._mesh.rotationQuaternion == undefined)) {\r\n                throw \"Error: Eulerian is set to false but the mesh's rotationQuaternion is not set.\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private _ecMatrix: Matrix = new Matrix();\r\n    //edit control to camera vector\r\n    private _ecTOcamera: Vector3 = new Vector3(0, 0, 0);\r\n    private _renderLoopProcess() {\r\n\r\n        //sync the edit control position and rotation with that of mesh\r\n        this._ecRoot.position = this._mesh.getAbsolutePivotPoint();\r\n        this._setECRotation();\r\n\r\n        //scale the EditControl so it seems at the same distance from camera/user\r\n        this._setECScale();\r\n\r\n        //rotate the free move,rotate,scale pick plane to face the camera/user\r\n        if (this._local) {\r\n            this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n            Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n            //note pALL is child of ecRoot hence lookAt in local space\r\n            this._pALL.lookAt(this._ecTOcamera, 0, 0, 0, Space.LOCAL);\r\n        } else {\r\n            this._mainCamera.position.subtractToRef(this._ecRoot.position, this._ecTOcamera);\r\n            this._pALL.lookAt(this._mainCamera.position, 0, 0, 0, Space.WORLD);\r\n        }\r\n\r\n        //rotate the rotation and planar guide to face the camera/user\r\n        if (this._rotEnabled) {\r\n            this._rotRotGuides();\r\n        }\r\n        else if (this._transEnabled) this._rotPlanarGuides(this._tXZ, this._tZY, this._tYX);\r\n        else if (this._scaleEnabled) this._rotPlanarGuides(this._sXZ, this._sZY, this._sYX);\r\n\r\n        //check pointer over axes only during pointer moves\r\n        //this.onPointerOver();\r\n    }\r\n\r\n    /**\r\n     * sets rotaion of edit control to that of the mesh\r\n     */\r\n    private _setECRotation() {\r\n        if (this._local) {\r\n            if (this._mesh.parent == null) {\r\n                if (this._eulerian) {\r\n                    let rot: Vector3 = this._mesh.rotation;\r\n                    Quaternion.RotationYawPitchRollToRef(rot.y, rot.x, rot.z, this._ecRoot.rotationQuaternion);\r\n                } else {\r\n                    this._ecRoot.rotationQuaternion.copyFrom(this._mesh.rotationQuaternion);\r\n                }\r\n            } else {\r\n\r\n                if (this._isScaleUnEqual(this._mesh)) return;\r\n\r\n                this._mesh.getWorldMatrix().getRotationMatrixToRef(this._tm);\r\n                Quaternion.FromRotationMatrixToRef(this._tm, this._ecRoot.rotationQuaternion);\r\n                //this._ecRoot.rotationQuaternion.normalize();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * checks if any of the mesh's ancestors has non uniform scale\r\n     */\r\n    private _isScaleUnEqual(mesh: Mesh): boolean {\r\n        if (mesh.parent == null) return false;\r\n        while (mesh.parent != null) {\r\n            if (((<Mesh>mesh.parent).scaling.x != (<Mesh>mesh.parent).scaling.y ||\r\n                (<Mesh>mesh.parent).scaling.y != (<Mesh>mesh.parent).scaling.z)) {\r\n                return true;\r\n            } else {\r\n                mesh = <Mesh>mesh.parent;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //how far away from camera should the edit control appear to be\r\n    private _distFromCamera: number = 2;\r\n    //vector from camera to edit control\r\n    private _cameraTOec: Vector3 = new Vector3(0, 0, 0);\r\n    private _cameraNormal: Vector3 = new Vector3(0, 0, 0);\r\n    private _setECScale() {\r\n        this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n        Vector3.FromFloatArrayToRef(this._mainCamera.getWorldMatrix().asArray(), 8, this._cameraNormal);\r\n\r\n        //get distance of edit control from the camera plane \r\n        //project \"camera to edit control\" vector onto the camera normal\r\n        let parentOnNormal: number = Vector3.Dot(this._cameraTOec, this._cameraNormal) / this._cameraNormal.length();\r\n\r\n        let s: number = Math.abs(parentOnNormal / this._distFromCamera);\r\n        Vector3.FromFloatsToRef(s, s, s, this._ecRoot.scaling);\r\n        //Vector3.FromFloatsToRef(s,s,s,this.pALL.scaling);\r\n    }\r\n\r\n\r\n    //rotate the rotation guides so that they are facing the camera\r\n    private _rotRotGuides() {\r\n        let rotX = Math.atan(this._ecTOcamera.y / this._ecTOcamera.z);\r\n        if (this._ecTOcamera.z >= 0) {\r\n            this._rX.rotation.x = -rotX;\r\n        } else {\r\n            this._rX.rotation.x = -rotX - Math.PI;\r\n        }\r\n\r\n        let rotY = Math.atan(this._ecTOcamera.x / this._ecTOcamera.z);\r\n        if (this._ecTOcamera.z >= 0) {\r\n            this._rY.rotation.y = rotY;\r\n        } else {\r\n            this._rY.rotation.y = rotY + Math.PI;\r\n        }\r\n\r\n        let rotZ = Math.atan(this._ecTOcamera.x / this._ecTOcamera.y);\r\n        if (this._ecTOcamera.y >= 0) {\r\n            this._rZ.rotation.z = -rotZ;\r\n        } else {\r\n            this._rZ.rotation.z = -rotZ - Math.PI;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rotate the planar guide so that they are facing the camera\r\n     */\r\n    private _rotPlanarGuides(XZ: Mesh, ZY: Mesh, YX: Mesh) {\r\n        let ec: Vector3 = this._ecTOcamera;\r\n\r\n        XZ.rotation.x = 0;\r\n        XZ.rotation.y = 0;\r\n        XZ.rotation.z = 0;\r\n\r\n        ZY.rotation.x = 0;\r\n        ZY.rotation.y = 0;\r\n        ZY.rotation.z = 0;\r\n\r\n        YX.rotation.x = 0;\r\n        YX.rotation.y = 0;\r\n        YX.rotation.z = 0;\r\n\r\n        if (ec.x <= 0 && ec.y >= 0 && ec.z >= 0) {\r\n            XZ.rotation.z = 3.14;\r\n            YX.rotation.y = 3.14;\r\n        } else if (ec.x <= 0 && ec.y >= 0 && ec.z <= 0) {\r\n            XZ.rotation.y = 3.14;\r\n            ZY.rotation.y = 3.14;\r\n            YX.rotation.y = 3.14;\r\n        } else if (ec.x >= 0 && ec.y >= 0 && ec.z <= 0) {\r\n            XZ.rotation.x = 3.14;\r\n            ZY.rotation.y = 3.14;\r\n        } else if (ec.x >= 0 && ec.y <= 0 && ec.z >= 0) {\r\n            ZY.rotation.z = 3.14;\r\n            YX.rotation.x = 3.14;\r\n        } else if (ec.x <= 0 && ec.y <= 0 && ec.z >= 0) {\r\n            XZ.rotation.z = 3.14;\r\n            ZY.rotation.z = 3.14;\r\n            YX.rotation.z = 3.14;\r\n        } else if (ec.x <= 0 && ec.y <= 0 && ec.z <= 0) {\r\n            XZ.rotation.y = 3.14;\r\n            ZY.rotation.x = 3.14;\r\n            YX.rotation.z = 3.14;\r\n        } else if (ec.x >= 0 && ec.y <= 0 && ec.z <= 0) {\r\n            XZ.rotation.x = 3.14;\r\n            ZY.rotation.x = 3.14;\r\n            YX.rotation.x = 3.14;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public switchTo(mesh: Mesh, eulerian?: boolean) {\r\n        mesh.computeWorldMatrix(true);\r\n        this._mesh = mesh;\r\n        if (eulerian != null) {\r\n            this._eulerian = eulerian;\r\n        }\r\n        this._checkQuaternion();\r\n        this._setLocalAxes(mesh);\r\n        this._actHist = new ActHist(mesh, 10);\r\n        this.refreshBoundingInfo();\r\n    }\r\n\r\n    public setUndoCount(c: number) {\r\n        this._actHist.setCapacity(c);\r\n    }\r\n\r\n    public undo() {\r\n        let at: number = this._actHist.undo();\r\n        this._mesh.computeWorldMatrix(true);\r\n        this._setLocalAxes(this._mesh);\r\n        this._callActionStartListener(at);\r\n        this._callActionListener(at);\r\n        this._callActionEndListener(at);\r\n    }\r\n\r\n    public redo() {\r\n        let at: number = this._actHist.redo();\r\n        this._mesh.computeWorldMatrix(true);\r\n        this._setLocalAxes(this._mesh);\r\n        this._callActionStartListener(at);\r\n        this._callActionListener(at);\r\n        this._callActionEndListener(at);\r\n    }\r\n\r\n    /**\r\n     * detach the edit control from the mesh and dispose off all\r\n     * resources created by the edit control\r\n     */\r\n    public detach() {\r\n        this._canvas.removeEventListener(\"pointerdown\", this._pointerdown, false);\r\n        this._canvas.removeEventListener(\"pointerup\", this._pointerup, false);\r\n        this._canvas.removeEventListener(\"pointermove\", this._pointermove, false);\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.removeAllActionListeners();\r\n        this._disposeAll();\r\n    }\r\n    private _prevState: String = \"\";\r\n    private _hidden: boolean = false;\r\n\r\n    /**\r\n     * hide the edit control. use show() to unhide the control.\r\n     */\r\n    public hide() {\r\n        this._hidden = true;\r\n        if (this._transEnabled) {\r\n            this._prevState = \"T\";\r\n            this.disableTranslation();\r\n        } else if (this._rotEnabled) {\r\n            this._prevState = \"R\";\r\n            this.disableRotation();\r\n        } else if (this._scaleEnabled) {\r\n            this._prevState = \"S\";\r\n            this.disableScaling();\r\n        }\r\n        this._hideCommonAxes();\r\n    }\r\n\r\n    private _hideCommonAxes() {\r\n        this._xaxis.visibility = 0;\r\n        this._yaxis.visibility = 0;\r\n        this._zaxis.visibility = 0;\r\n    }\r\n    private _showCommonAxes() {\r\n        this._xaxis.visibility = this._visibility;\r\n        this._yaxis.visibility = this._visibility;\r\n        this._zaxis.visibility = this._visibility;\r\n    }\r\n    /**\r\n     * unhide the editcontrol hidden using the hide() method\r\n     */\r\n    public show() {\r\n        this._hidden = false;\r\n        this._showCommonAxes();\r\n        if (this._prevState == \"T\") this.enableTranslation();\r\n        else if (this._prevState == \"R\") this.enableRotation();\r\n        else if (this._prevState == \"S\") this.enableScaling();\r\n    }\r\n\r\n    /**\r\n     * check if the editcontrol was hidden using the hide() methods\r\n     */\r\n    public isHidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    private _disposeAll() {\r\n        this._ecRoot.dispose();\r\n        this._disposeMaterials();\r\n        this._actHist = null;\r\n    }\r\n\r\n    private _actionListener: (actionType: number) => void = null;\r\n    private _actionStartListener: (actionType: number) => void = null;\r\n    private _actionEndListener: (actionType: number) => void = null;\r\n\r\n    public addActionListener(actionListener: (actionType: number) => void) {\r\n        this._actionListener = actionListener;\r\n    }\r\n    public removeActionListener() {\r\n        this._actionListener = null;\r\n    }\r\n    public addActionStartListener(actionStartListener: (actionType: number) => void) {\r\n        this._actionStartListener = actionStartListener;\r\n    }\r\n    public removeActionStartListener() {\r\n        this._actionStartListener = null;\r\n    }\r\n    public addActionEndListener(actionEndListener: (actionType: number) => void) {\r\n        this._actionEndListener = actionEndListener;\r\n    }\r\n    public removeActionEndListener() {\r\n        this._actionEndListener = null;\r\n    }\r\n\r\n    public removeAllActionListeners() {\r\n        this._actionListener = null;\r\n        this._actionStartListener = null;\r\n        this._actionEndListener = null;\r\n    }\r\n\r\n    private _pDown: boolean = false;\r\n\r\n    private _axisPicked: Mesh;\r\n\r\n    private _onPointerDown(evt: Event) {\r\n        evt.preventDefault();\r\n        this._pDown = true;\r\n        if ((<PointerEvent>evt).button != 0) return;\r\n        //TODO: do we really need to do a pick here?\r\n        //onPointerOver() has already done this.\r\n        let pickResult: PickingInfo = this._scene.pick(this._scene.pointerX, this._scene.pointerY, (mesh) => {\r\n            if (this._transEnabled) {\r\n                if ((mesh == this._tX) || (mesh == this._tY) || (mesh == this._tZ) || (mesh == this._tXZ) || (mesh == this._tZY) || (mesh == this._tYX) || (mesh == this._tAll)) return true;\r\n            } else if ((this._rotEnabled)) {\r\n                if ((mesh == this._rX) || (mesh == this._rY) || (mesh == this._rZ) || (mesh == this._rAll)) return true;\r\n            } else if ((this._scaleEnabled)) {\r\n                if ((mesh == this._sX) || (mesh == this._sY) || (mesh == this._sZ) || (mesh == this._sXZ) || (mesh == this._sZY) || (mesh == this._sYX) || (mesh == this._sAll)) return true;\r\n            }\r\n            return false;\r\n        }, null, this._mainCamera);\r\n\r\n        if (pickResult.hit) {\r\n            //this.setAxesVisiblity(0);\r\n            this._axisPicked = <Mesh>pickResult.pickedMesh;\r\n            let childs: Node[] = this._axisPicked.getChildren();\r\n            if (childs.length > 0) {\r\n                (<Mesh>childs[0]).visibility = this._visibility;\r\n            } else {\r\n                this._axisPicked.visibility = this._visibility;\r\n            }\r\n            let name: string = this._axisPicked.name;\r\n            if ((name == \"X\")) this._bXaxis.visibility = 1;\r\n            else if ((name == \"Y\")) this._bYaxis.visibility = 1;\r\n            else if ((name == \"Z\")) this._bZaxis.visibility = 1;\r\n            else if ((name == \"XZ\")) {\r\n                this._bXaxis.visibility = 1;\r\n                this._bZaxis.visibility = 1;\r\n            } else if ((name == \"ZY\")) {\r\n                this._bZaxis.visibility = 1;\r\n                this._bYaxis.visibility = 1;\r\n            } else if ((name == \"YX\")) {\r\n                this._bYaxis.visibility = 1;\r\n                this._bXaxis.visibility = 1;\r\n            } else if ((name == \"ALL\")) {\r\n                this._bXaxis.visibility = 1;\r\n                this._bYaxis.visibility = 1;\r\n                this._bZaxis.visibility = 1;\r\n            }\r\n            this._setEditing(true);\r\n            //lets find out where we are on the pickplane\r\n            this._pickedPlane = this._getPickPlane(this._axisPicked);\r\n            if (this._pickedPlane != null) {\r\n                this._prevPos = this._getPosOnPickPlane();\r\n            } else {\r\n                this._prevPos = null;\r\n            }\r\n            window.setTimeout(((cam, can) => { return this._detachCamera(cam, can) }), 0, this._mainCamera, this._canvas);\r\n        }\r\n    }\r\n\r\n    private _setEditing(editing: boolean) {\r\n        this._editing = editing;\r\n        if (editing) {\r\n            this._setActionType();\r\n            if (this._actionType == ActionType.ROT) {\r\n                this._snapRA = 0;\r\n            }\r\n            this._callActionStartListener(this._actionType);\r\n        } else {\r\n            this._callActionEndListener(this._actionType);\r\n        }\r\n    }\r\n\r\n    public isEditing(): boolean {\r\n        return this._editing;\r\n    }\r\n\r\n    /**\r\n     * no camera movement during edit\r\n     */\r\n    private _detachCamera(cam: Object, can: Object) {\r\n        let camera: Camera = <Camera>cam;\r\n        let canvas: HTMLCanvasElement = <HTMLCanvasElement>can;\r\n        camera.detachControl(canvas);\r\n    }\r\n\r\n    private _prevOverMesh: Mesh;\r\n\r\n    private _pointerIsOver: boolean = false;\r\n\r\n    public isPointerOver(): boolean {\r\n        return this._pointerIsOver;\r\n    }\r\n    private _savedMat: Material;\r\n    private _savedCol: Color3;\r\n    private _onPointerOver() {\r\n        //if(this.pDown) return;\r\n        let pickResult: PickingInfo = this._scene.pick(this._scene.pointerX, this._scene.pointerY, (mesh) => {\r\n            if (this._transEnabled) {\r\n                if ((mesh == this._tX) || (mesh == this._tY) || (mesh == this._tZ) || (mesh == this._tXZ) || (mesh == this._tZY) || (mesh == this._tYX) || (mesh == this._tAll)) return true;\r\n            } else if ((this._rotEnabled)) {\r\n                if ((mesh == this._rX) || (mesh == this._rY) || (mesh == this._rZ) || (mesh == this._rAll)) return true;\r\n            } else if (this._scaleEnabled) {\r\n                if ((mesh == this._sX) || (mesh == this._sY) || (mesh == this._sZ) || (mesh == this._sXZ) || (mesh == this._sZY) || (mesh == this._sYX) || (mesh == this._sAll)) return true;\r\n            }\r\n            return false;\r\n        }, null, this._mainCamera);\r\n        if (pickResult.hit) {\r\n            //if we are still over the same axis mesh then don't do anything\r\n            if (<Mesh>pickResult.pickedMesh != this._prevOverMesh) {\r\n                this._pointerIsOver = true;\r\n                //if we moved directly from one axis mesh to this then clean up the prev axis mesh\r\n                this._clearPrevOverMesh();\r\n                this._prevOverMesh = <Mesh>pickResult.pickedMesh;\r\n                if (this._rotEnabled) {\r\n                    this._savedCol = (<LinesMesh>this._prevOverMesh.getChildren()[0]).color;\r\n                    (<LinesMesh>this._prevOverMesh.getChildren()[0]).color=this._whiteCol;\r\n                } else {\r\n                    let childs: Node[] = this._prevOverMesh.getChildren();\r\n                    if (childs.length > 0) {\r\n                        this._savedMat = (<Mesh>childs[0]).material;\r\n                        (<Mesh>childs[0]).material = this._whiteMat;\r\n                    } else {\r\n                        this._savedMat = this._prevOverMesh.material;\r\n                        this._prevOverMesh.material = this._whiteMat;\r\n                    }\r\n                }\r\n                if (this._prevOverMesh.name == \"X\") {\r\n                    this._xaxis.color=this._whiteCol;\r\n                } else if (this._prevOverMesh.name == \"Y\") {\r\n                    this._yaxis.color = this._whiteCol;\r\n                } else if (this._prevOverMesh.name == \"Z\") {\r\n                    this._zaxis.color = this._whiteCol;\r\n                }\r\n            }\r\n        } else {\r\n            this._pointerIsOver = false;\r\n            if (this._prevOverMesh != null) {\r\n                this._restoreColor(this._prevOverMesh);\r\n                this._prevOverMesh = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    //clean up any axis we might have been howering over before\r\n    private _clearPrevOverMesh() {\r\n        if (this._prevOverMesh != null) {\r\n            this._prevOverMesh.visibility = 0;\r\n            this._restoreColor(this._prevOverMesh);\r\n        }\r\n    }\r\n\r\n    private _restoreColor(mesh: Mesh) {\r\n        switch (mesh.name) {\r\n            case \"X\":\r\n                this._xaxis.color=this._redCol;\r\n                break;\r\n            case \"Y\":\r\n                this._yaxis.color=this._greenCol;\r\n                break;\r\n            case \"Z\":\r\n                this._zaxis.color=this._blueCol;\r\n                break;\r\n        }\r\n\r\n        if (this._rotEnabled) {\r\n            (<LinesMesh>mesh.getChildren()[0]).color = this._savedCol;\r\n        } else {\r\n            let childs: Node[] = mesh.getChildren();\r\n            if (childs.length > 0) {\r\n                (<Mesh>childs[0]).material = this._savedMat;\r\n            } else {\r\n                mesh.material = this._savedMat;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _editing: boolean = false;\r\n\r\n    private _onPointerUp(evt: Event) {\r\n        this._pDown = false;\r\n        if (this._editing) {\r\n            this._mainCamera.attachControl(this._canvas);\r\n            this._setEditing(false);\r\n            //this.setAxesVisiblity(1);\r\n            this._hideBaxis();\r\n            if (this._prevOverMesh != null) {\r\n                this._restoreColor(this._prevOverMesh);\r\n                this._prevOverMesh = null;\r\n            }\r\n            this._actHist.add(this._actionType);\r\n        }\r\n    }\r\n\r\n    private _actionType: number;\r\n    private _setActionType() {\r\n        if (this._transEnabled) {\r\n            this._actionType = ActionType.TRANS;\r\n        } else if ((this._rotEnabled)) {\r\n            this._actionType = ActionType.ROT;\r\n        } else if ((this._scaleEnabled)) {\r\n            this._actionType = ActionType.SCALE;\r\n        }\r\n    }\r\n\r\n    private _callActionListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionListener != null) {\r\n            this._actionListener(at);\r\n        }\r\n\r\n    }\r\n    private _callActionStartListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionStartListener != null) {\r\n            this._actionStartListener(at);\r\n        }\r\n\r\n    }\r\n    private _callActionEndListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionEndListener != null) {\r\n            this._actionEndListener(at);\r\n        }\r\n\r\n    }\r\n\r\n    private _prevPos: Vector3;\r\n    private _onPointerMove(evt: Event) {\r\n\r\n        if (!this._pDown) {\r\n            this._onPointerOver();\r\n            return;\r\n        }\r\n        if (!this._editing) return;\r\n        if (this._prevPos == null) return;\r\n\r\n        let newPos: Vector3 = this._getPosOnPickPlane();\r\n\r\n        if (newPos == null) return;\r\n\r\n        if (this._rotEnabled) {\r\n            this._doRotation(this._mesh, this._axisPicked, newPos, this._prevPos);\r\n        } else {\r\n            let diff: Vector3 = newPos.subtract(this._prevPos);\r\n            if (diff.x == 0 && diff.y == 0 && diff.z == 0) return;\r\n            if (this._transEnabled) {\r\n                this._doTranslation(diff);\r\n            } else {\r\n                if (this._scaleEnabled && this._local) this._doScaling(diff);\r\n            }\r\n        }\r\n        this._prevPos = newPos;\r\n        this._callActionListener(this._actionType);\r\n    }\r\n\r\n\r\n    //rotate differently if camera is too close to the rotation plane\r\n    private _rotate2: boolean = false;\r\n    private _getPickPlane(axis: Mesh): Mesh {\r\n        let n: string = axis.name;\r\n        if (this._transEnabled || this._scaleEnabled) {\r\n            if (n == \"XZ\") return this._pXZ;\r\n            else if (n == \"ZY\") return this._pZY;\r\n            else if (n == \"YX\") return this._pYX;\r\n            else if (n == \"ALL\") return this._pALL;\r\n            else {\r\n                //get the position of camera in the edit control frame of reference\r\n                this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n                Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n                let c = this._ecTOcamera;\r\n                if (n === \"X\") {\r\n                    if (Math.abs(c.y) > Math.abs(c.z)) {\r\n                        return this._pXZ;\r\n                    } else return this._pYX;\r\n                } else if (n === \"Z\") {\r\n                    if (Math.abs(c.y) > Math.abs(c.x)) {\r\n                        return this._pXZ;\r\n                    } else return this._pZY;\r\n                } else if (n === \"Y\") {\r\n                    if (Math.abs(c.z) > Math.abs(c.x)) {\r\n                        return this._pYX;\r\n                    } else return this._pZY;\r\n                }\r\n            }\r\n        } else if (this._rotEnabled) {\r\n            this._rotate2 = false;\r\n            //get the position of camera in the edit control frame of reference\r\n            this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n            Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n            let c = this._ecTOcamera;\r\n            //if camera is too close to the rotation plane then use alternate rotation process\r\n            switch (n) {\r\n                case \"X\":\r\n                    if (Math.abs(c.x) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pZY;\r\n                case \"Y\":\r\n                    if (Math.abs(c.y) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pXZ;\r\n                case \"Z\":\r\n                    if (Math.abs(c.z) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pYX;\r\n                default:\r\n                    return this._pALL;\r\n            }\r\n        } else return null;\r\n    }\r\n\r\n\r\n\r\n    private _transBy: Vector3 = new Vector3(0, 0, 0);\r\n    private _doTranslation(diff: Vector3) {\r\n\r\n        if ((this._mesh.parent != null) && this._isScaleUnEqual(this._mesh)) {\r\n            this._setLocalAxes(this._ecRoot);\r\n        } else {\r\n            this._setLocalAxes(this._mesh);\r\n        }\r\n\r\n        let n: string = this._axisPicked.name;\r\n        if (n == \"ALL\") {\r\n            //TODO when translating, the orientation of pALL keeps changing\r\n            //TODo this is not so with rotation or scaling\r\n            //TODO so for translation instead of pALL maybe we should use the camera view plane for picking\r\n            this._transBy = diff;\r\n        } else {\r\n            this._transBy.x = 0; this._transBy.y = 0; this._transBy.z = 0;\r\n\r\n            if ((n == \"X\") || (n == \"XZ\") || (n == \"YX\")) {\r\n                if (this._local) this._transBy.x = Vector3.Dot(diff, this._localX) / this._localX.length();\r\n                else this._transBy.x = diff.x;\r\n            }\r\n            if ((n == \"Y\") || (n == \"ZY\") || (n == \"YX\")) {\r\n                if (this._local) this._transBy.y = Vector3.Dot(diff, this._localY) / this._localY.length();\r\n                else this._transBy.y = diff.y;\r\n            }\r\n            if ((n == \"Z\") || (n == \"XZ\") || (n == \"ZY\")) {\r\n                if (this._local) this._transBy.z = Vector3.Dot(diff, this._localZ) / this._localZ.length();\r\n                else this._transBy.z = diff.z;\r\n            }\r\n        }\r\n        this._transWithSnap(this._mesh, this._transBy, this._local);\r\n\r\n        // bound the translation\r\n        if (this._transBoundsMin) {\r\n            this._mesh.position.x = Math.max(this._mesh.position.x, this._transBoundsMin.x);\r\n            this._mesh.position.y = Math.max(this._mesh.position.y, this._transBoundsMin.y);\r\n            this._mesh.position.z = Math.max(this._mesh.position.z, this._transBoundsMin.z);\r\n        }\r\n        if (this._transBoundsMax) {\r\n            this._mesh.position.x = Math.min(this._mesh.position.x, this._transBoundsMax.x);\r\n            this._mesh.position.y = Math.min(this._mesh.position.y, this._transBoundsMax.y);\r\n            this._mesh.position.z = Math.min(this._mesh.position.z, this._transBoundsMax.z);\r\n        }\r\n\r\n        this._mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n\r\n\r\n    private _snapTV: Vector3 = new Vector3(0, 0, 0);\r\n    private _transWithSnap(mesh: Mesh, trans: Vector3, local: boolean) {\r\n        if (this._snapT) {\r\n            let snapit: boolean = false;\r\n            this._snapTV.addInPlace(trans);\r\n            if (Math.abs(this._snapTV.x) > this._tSnap.x) {\r\n                if (this._snapTV.x > 0) trans.x = this._tSnap.x; else trans.x = -this._tSnap.x;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapTV.y) > this._tSnap.y) {\r\n                if (this._snapTV.y > 0) trans.y = this._tSnap.y; else trans.y = -this._tSnap.y;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapTV.z) > this._tSnap.z) {\r\n                if (this._snapTV.z > 0) trans.z = this._tSnap.z; else trans.z = -this._tSnap.z;\r\n                snapit = true;\r\n            }\r\n            if (snapit) {\r\n                if (Math.abs(trans.x) !== this._tSnap.x) trans.x = 0;\r\n                if (Math.abs(trans.y) !== this._tSnap.y) trans.y = 0;\r\n                if (Math.abs(trans.z) !== this._tSnap.z) trans.z = 0;\r\n                Vector3.FromFloatsToRef(0, 0, 0, this._snapTV);\r\n                snapit = false;\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (local) {\r\n            //locallyTranslate moves the mesh wrt the absolute location not pivotlocation :(\r\n            //this.mesh.locallyTranslate(trans);\r\n            //\r\n            this._localX.normalizeToRef(this._tv1);\r\n            this._localY.normalizeToRef(this._tv2);\r\n            this._localZ.normalizeToRef(this._tv3);\r\n            this._mesh.translate(this._tv1, trans.x, Space.WORLD);\r\n            this._mesh.translate(this._tv2, trans.y, Space.WORLD);\r\n            this._mesh.translate(this._tv3, trans.z, Space.WORLD);\r\n        } else {\r\n            if (this._mesh.parent == null) {\r\n                this._mesh.position.addInPlace(trans);\r\n            } else {\r\n                this._mesh.setAbsolutePosition(trans.addInPlace(this._mesh.absolutePosition));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private _snapS: boolean = false;\r\n    private _snapSV: Vector3 = new Vector3(0, 0, 0);\r\n    private _scaleSnap: number = 0.25;\r\n    private _scale: Vector3 = new Vector3(0, 0, 0);\r\n    private _doScaling(diff: Vector3) {\r\n        this._setLocalAxes(this._mesh);\r\n\r\n        this._scale.x = 0;\r\n        this._scale.y = 0;\r\n        this._scale.z = 0;\r\n        let n: string = this._axisPicked.name;\r\n        if ((n == \"X\") || (n == \"XZ\") || (n == \"YX\")) {\r\n            this._scale.x = Vector3.Dot(diff, this._localX) / this._localX.length();\r\n            if (this._mesh.scaling.x < 0) this._scale.x = -this._scale.x;\r\n            //if(this.lhsRhs) this.scale.x=-this.scale.x;\r\n        }\r\n        if ((n == \"Y\") || (n == \"ZY\") || (n == \"YX\")) {\r\n            this._scale.y = Vector3.Dot(diff, this._localY) / this._localY.length();\r\n            if (this._mesh.scaling.y < 0) this._scale.y = -this._scale.y;\r\n        }\r\n        if ((n == \"Z\") || (n == \"XZ\") || (n == \"ZY\")) {\r\n            this._scale.z = Vector3.Dot(diff, this._localZ) / this._localZ.length();\r\n            if (this._mesh.scaling.z < 0) this._scale.z = -this._scale.z;\r\n        }\r\n\r\n        //as the mesh becomes large reduce the amount by which we scale.\r\n        let bbd = this._boundingDimesion;\r\n        this._scale.x = this._scale.x / bbd.x;\r\n        this._scale.y = this._scale.y / bbd.y;\r\n        this._scale.z = this._scale.z / bbd.z;\r\n\r\n        if (n == \"ALL\") {\r\n            //project movement along camera up vector\r\n            //if up then scale up else scale down\r\n            let s: number = Vector3.Dot(diff, this._mainCamera.upVector);\r\n            s = s / Math.max(bbd.x, bbd.y, bbd.z);\r\n            this._scale.copyFromFloats(s, s, s);\r\n        } else {\r\n            let inPlane: boolean = false;\r\n            if (n == \"XZ\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.x) > Math.abs(this._scale.z)) {\r\n                    this._scale.z = this._scale.x;\r\n                } else this._scale.x = this._scale.z;\r\n            } else if (n == \"ZY\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.z) > Math.abs(this._scale.y)) {\r\n                    this._scale.y = this._scale.z;\r\n                } else this._scale.z = this._scale.y;\r\n            } else if (n == \"YX\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.y) > Math.abs(this._scale.x)) {\r\n                    this._scale.x = this._scale.y;\r\n                } else this._scale.y = this._scale.x;\r\n            }\r\n            if (inPlane) {\r\n                //check if the mouse/pointer was moved towards camera or away from camera\r\n                //if towards then scale up else scale down\r\n                this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n                let s: number = Vector3.Dot(diff, this._cameraTOec);\r\n                this._scale.x = Math.abs(this._scale.x);\r\n                this._scale.y = Math.abs(this._scale.y);\r\n                this._scale.z = Math.abs(this._scale.z);\r\n                if (s > 0) {\r\n                    if (this._mesh.scaling.x > 0) this._scale.x = -this._scale.x;\r\n                    //if(this.lhsRhs) this.scale.y=Math.abs(this.scale.y);\r\n                    if (this._mesh.scaling.y > 0) this._scale.y = -this._scale.y;\r\n                    if (this._mesh.scaling.z > 0) this._scale.z = -this._scale.z;\r\n                } else {\r\n                    //this.scale.x=Math.abs(this.scale.x);\r\n                    //if(this.lhsRhs) this.scale.y=-Math.abs(this.scale.y);\r\n                    //else this.scale.y=Math.abs(this.scale.y);\r\n                    if (this._mesh.scaling.x < 0) this._scale.x = -this._scale.x;\r\n                    if (this._mesh.scaling.y < 0) this._scale.y = -this._scale.y;\r\n                    if (this._mesh.scaling.z < 0) this._scale.z = -this._scale.z;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this._scaleWithSnap(this._mesh, this._scale);\r\n\r\n        // bound the scale\r\n        if (this._scaleBoundsMin) {\r\n            this._mesh.scaling.x = Math.max(this._mesh.scaling.x, this._scaleBoundsMin.x);\r\n            this._mesh.scaling.y = Math.max(this._mesh.scaling.y, this._scaleBoundsMin.y);\r\n            this._mesh.scaling.z = Math.max(this._mesh.scaling.z, this._scaleBoundsMin.z);\r\n        }\r\n        if (this._scaleBoundsMax) {\r\n            this._mesh.scaling.x = Math.min(this._mesh.scaling.x, this._scaleBoundsMax.x);\r\n            this._mesh.scaling.y = Math.min(this._mesh.scaling.y, this._scaleBoundsMax.y);\r\n            this._mesh.scaling.z = Math.min(this._mesh.scaling.z, this._scaleBoundsMax.z);\r\n        }\r\n\r\n    }\r\n\r\n    private _scaleWithSnap(mesh: Mesh, p: Vector3) {\r\n        if (this._snapS) {\r\n            let snapit: boolean = false;\r\n            this._snapSV.addInPlace(p);\r\n            if (Math.abs(this._snapSV.x) > this._scaleSnap) {\r\n                if (p.x > 0) p.x = this._scaleSnap; else p.x = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapSV.y) > this._scaleSnap) {\r\n                if (p.y > 0) p.y = this._scaleSnap; else p.y = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapSV.z) > this._scaleSnap) {\r\n                if (p.z > 0) p.z = this._scaleSnap; else p.z = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (!snapit) return;\r\n            if ((Math.abs(p.x) !== this._scaleSnap) && (p.x !== 0)) p.x = 0;\r\n            if ((Math.abs(p.y) !== this._scaleSnap) && (p.y !== 0)) p.y = 0;\r\n            if ((Math.abs(p.z) !== this._scaleSnap) && (p.z !== 0)) p.z = 0;\r\n            Vector3.FromFloatsToRef(0, 0, 0, this._snapSV);\r\n            snapit = false;\r\n        }\r\n        mesh.scaling.addInPlace(p);\r\n\r\n    }\r\n\r\n    private _localX: Vector3 = new Vector3(0, 0, 0);\r\n    private _localY: Vector3 = new Vector3(0, 0, 0);\r\n    private _localZ: Vector3 = new Vector3(0, 0, 0);\r\n\r\n    /*\r\n     * This would be called after rotation or scaling as the local axes direction or length might have changed\r\n     * We need to set the local axis as these are used in all three modes to figure out \r\n     * direction of mouse move wrt the axes\r\n     * TODO should use world pivotmatrix instead of worldmatrix - incase pivot axes were rotated?\r\n     */\r\n    private _setLocalAxes(mesh: Mesh) {\r\n        let meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 0, this._localX);\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 4, this._localY);\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 8, this._localZ);\r\n    }\r\n\r\n\r\n    /*\r\n     * boundingDimesion is used by scaling to adjust rate at which a mesh is scaled\r\n     * with respect to mouse movement.\r\n     *\r\n     */\r\n    private _boundingDimesion: Vector3;\r\n    private _getBoundingDimension(mesh: Mesh): Vector3 {\r\n        let bb: BoundingBox = mesh.getBoundingInfo().boundingBox;\r\n        let bd: Vector3 = bb.maximum.subtract(bb.minimum);\r\n        if (bd.x == 0) bd.x = 1;\r\n        if (bd.y == 0) bd.y = 1;\r\n        if (bd.z == 0) bd.z = 1;\r\n        return bd;\r\n    }\r\n\r\n    /*\r\n     *\r\n     * For the sake of speed the editcontrol calculates bounding info only once.\r\n     * This is in the constructor.\r\n     * Now The boundingbox dimension can change if the mesh is baked.\r\n     * If the editcontrol is attached to the mesh when the mesh was baked then\r\n     * the scaling speed will be incorrect.\r\n     * Thus client application should call refreshBoundingInfo if it bakes the mesh.\r\n     *\r\n     */\r\n    public refreshBoundingInfo() {\r\n        this._boundingDimesion = this._getBoundingDimension(this._mesh);\r\n    }\r\n\r\n    private _eulerian: boolean = false;\r\n    private _snapRA: number = 0;\r\n    private _doRotation(mesh: Mesh, axis: Mesh, newPos: Vector3, prevPos: Vector3) {\r\n\r\n        //for now no rotation if parents have non uniform scale\r\n        if (this._local && (this._mesh.parent != null) && this._isScaleUnEqual(mesh)) {\r\n            this._setLocalAxes(this._ecRoot);\r\n        } else {\r\n            this._setLocalAxes(mesh);\r\n        }\r\n\r\n        let angle: number = 0;\r\n\r\n        //rotation axis\r\n        let rAxis: Vector3;\r\n        if (axis == this._rX) rAxis = this._local ? this._localX : Axis.X;\r\n        else if (axis == this._rY) rAxis = this._local ? this._localY : Axis.Y;\r\n        else if (axis == this._rZ) rAxis = this._local ? this._localZ : Axis.Z;\r\n\r\n        this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n\r\n        /**\r\n         * A)first find the angle and the direction (clockwise or anticlockwise) by which the user was trying to rotate\r\n         * from the user(camera) perspective\r\n         */\r\n        if (this._rotate2) {\r\n            angle = this._getAngle2(prevPos, newPos, this._mainCamera.position, this._cameraTOec, rAxis);\r\n            //TODO check why we need to handle righ hand this way\r\n            if (this._scene.useRightHandedSystem) angle = -angle;\r\n        } else {\r\n            angle = this._getAngle(prevPos, newPos, mesh.getAbsolutePivotPoint(), this._cameraTOec);\r\n        }\r\n\r\n        /**\r\n         * B)then rotate based on users(camera) postion and orientation in the local/world space\r\n         * \r\n         */\r\n\r\n        if (this._snapR) {\r\n            this._snapRA += angle;\r\n            angle = 0;\r\n            if (Math.abs(this._snapRA) >= this._rotSnap) {\r\n                if (this._snapRA > 0) angle = this._rotSnap; else angle = -this._rotSnap;\r\n                this._snapRA = 0;\r\n            }\r\n        }\r\n\r\n        if (angle !== 0) {\r\n            this._cameraTOec.normalize();\r\n            if (axis == this._rAll) {\r\n                mesh.rotate(this._cameraTOec, -angle, Space.WORLD);\r\n            } else {\r\n                if (Vector3.Dot(rAxis, this._cameraTOec) >= 0) angle = -angle;\r\n                mesh.rotate(rAxis, angle, Space.WORLD);\r\n            }\r\n\r\n            if (this._eulerian) {\r\n                mesh.rotation = mesh.rotationQuaternion.toEulerAngles();\r\n                mesh.rotationQuaternion = null;\r\n            }\r\n\r\n            if (this._local) {\r\n                if ((this._mesh.parent != null) && this._isScaleUnEqual(mesh)) {\r\n                    if (axis == this._rAll) {\r\n                        this._ecRoot.rotate(this._cameraTOec, -angle, Space.WORLD);\r\n                    } else {\r\n                        this._ecRoot.rotate(rAxis, angle, Space.WORLD);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getPosOnPickPlane(): Vector3 {\r\n        let pickinfo: PickingInfo = this._scene.pick(this._scene.pointerX, this._scene.pointerY, (mesh) => {\r\n            return mesh == this._pickedPlane;\r\n        }, null, this._mainCamera);\r\n\r\n        if (pickinfo.hit) {\r\n            return pickinfo.pickedPoint;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _hideBaxis() {\r\n        this._bXaxis.visibility = 0;\r\n        this._bYaxis.visibility = 0;\r\n        this._bZaxis.visibility = 0;\r\n    }\r\n\r\n//    private _setAxesVisiblity(v: number) {\r\n//        if (this._transEnabled) {\r\n//            this._tEndX.visibility = v;\r\n//            this._tEndY.visibility = v;\r\n//            this._tEndZ.visibility = v;\r\n//            this._tEndXZ.visibility = v;\r\n//            this._tEndZY.visibility = v;\r\n//            this._tEndYX.visibility = v;\r\n//            this._tEndAll.visibility = v;\r\n//        }\r\n//        if (this._rotEnabled) {\r\n//            this._rEndX.visibility = v;\r\n//            this._rEndY.visibility = v;\r\n//            this._rEndZ.visibility = v;\r\n//            this._rEndAll.visibility = v;\r\n//        }\r\n//        if (this._scaleEnabled) {\r\n//            this._sEndX.visibility = v;\r\n//            this._sEndY.visibility = v;\r\n//            this._sEndZ.visibility = v;\r\n//            this._sEndXZ.visibility = v;\r\n//            this._sEndZY.visibility = v;\r\n//            this._sEndYX.visibility = v;\r\n//            this._sEndAll.visibility = v;\r\n//        }\r\n//    }\r\n\r\n    public getRotationQuaternion(): Quaternion {\r\n        return this._ecRoot.rotationQuaternion\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this._ecRoot.position;\r\n    }\r\n\r\n    private _transEnabled: boolean = false;\r\n\r\n    public isTranslationEnabled(): boolean {\r\n        return this._transEnabled;\r\n    }\r\n\r\n    public enableTranslation() {\r\n        if ((this._tX == null)) {\r\n            this._createTransAxes();\r\n            this._tCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._transEnabled) {\r\n            this._setVisibility(this._all_tEnd,this._visibility);\r\n            this._transEnabled = true;\r\n            this.disableRotation();\r\n            this.disableScaling();\r\n        }\r\n    }\r\n\r\n    public disableTranslation() {\r\n        if (this._transEnabled) {\r\n            this._setVisibility(this._all_tEnd,0);\r\n            this._transEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _rotEnabled: boolean = false;\r\n\r\n    public isRotationEnabled(): boolean {\r\n        return this._rotEnabled;\r\n    }\r\n\r\n    public returnEuler(euler: boolean) {\r\n        this._eulerian = euler;\r\n    }\r\n\r\n    public enableRotation() {\r\n        //if(this.rX==null) {\r\n        if (this._rCtl == null) {\r\n            this._createRotAxes();\r\n            this._rCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._rotEnabled) {\r\n            this._setVisibility(this._all_rEnd,this._visibility);\r\n            this._rotEnabled = true;\r\n            this.disableTranslation();\r\n            this.disableScaling();\r\n        }\r\n    }\r\n\r\n    public disableRotation() {\r\n        if (this._rotEnabled) {\r\n            this._setVisibility(this._all_rEnd,0);\r\n            this._rotEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _scaleEnabled: boolean = false;\r\n\r\n    public isScalingEnabled(): boolean {\r\n        return this._scaleEnabled;\r\n    }\r\n\r\n    public enableScaling() {\r\n        if (this._sX == null) {\r\n            this._createScaleAxes();\r\n            this._sCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._scaleEnabled) {\r\n            this._setVisibility(this._all_sEnd,this._visibility);\r\n            this._scaleEnabled = true;\r\n            this.disableTranslation();\r\n            this.disableRotation();\r\n        }\r\n    }\r\n\r\n    public disableScaling() {\r\n        if (this._scaleEnabled) {\r\n             this._setVisibility(this._all_sEnd,0);\r\n            this._scaleEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _scaleBoundsMin: Vector3;\r\n    private _scaleBoundsMax: Vector3;\r\n\r\n    public setScaleBounds(min?: Vector3, max?: Vector3) {\r\n        this._scaleBoundsMin = min ? min : null;\r\n        this._scaleBoundsMax = max ? max : null;\r\n        if (this._scaleBoundsMin != null) {\r\n            if (this._scaleBoundsMin.x == 0) this._scaleBoundsMin.x = 0.00000001;\r\n            if (this._scaleBoundsMin.y == 0) this._scaleBoundsMin.y = 0.00000001;\r\n            if (this._scaleBoundsMin.z == 0) this._scaleBoundsMin.z = 0.00000001;\r\n        }\r\n    }\r\n\r\n    public removeScaleBounds() {\r\n        this._scaleBoundsMin = null;\r\n        this._scaleBoundsMax = null;\r\n    }\r\n\r\n\r\n    private _transBoundsMin: Vector3;\r\n    private _transBoundsMax: Vector3;\r\n\r\n    public setTransBounds(min?: Vector3, max?: Vector3) {\r\n        this._transBoundsMin = min ? min : null;\r\n        this._transBoundsMax = max ? max : null;\r\n    }\r\n\r\n    public removeTransBounds() {\r\n        this._transBoundsMin = null;\r\n        this._transBoundsMax = null;\r\n    }\r\n\r\n    private _rotBoundsMin: Vector3;\r\n    private _rotBoundsMax: Vector3;\r\n\r\n    public setRotBounds(min?: Vector3, max?: Vector3) {\r\n        this._rotBoundsMin = min ? min : null;\r\n        this._rotBoundsMax = max ? max : null;\r\n    }\r\n\r\n    public removeRotBounds() {\r\n        this._rotBoundsMin = null;\r\n        this._rotBoundsMax = null;\r\n    }\r\n\r\n    private _bXaxis: LinesMesh;\r\n    private _bYaxis: LinesMesh;\r\n    private _bZaxis: LinesMesh;\r\n    private _xaxis: LinesMesh;\r\n    private _yaxis: LinesMesh;\r\n    private _zaxis: LinesMesh;\r\n\r\n\r\n    /*\r\n     * create big and small axeses which will be shown in translate, rotate and scale mode.\r\n     *\r\n     */\r\n    private _createCommonAxes(): Mesh {\r\n\r\n        let guideAxes: Mesh = new Mesh(\"\", this._scene);\r\n\r\n        //the big axes, shown when an axis is selected\r\n        this._bXaxis = Mesh.CreateLines(\"\", [new Vector3(-100, 0, 0), new Vector3(100, 0, 0)], this._scene);\r\n        this._bYaxis = Mesh.CreateLines(\"\", [new Vector3(0, -100, 0), new Vector3(0, 100, 0)], this._scene);\r\n        this._bZaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, -100), new Vector3(0, 0, 100)], this._scene);\r\n\r\n        //lines are now pickable too\r\n        this._bXaxis.isPickable = false;\r\n        this._bYaxis.isPickable = false;\r\n        this._bZaxis.isPickable = false;\r\n\r\n        this._bXaxis.parent = guideAxes;\r\n        this._bYaxis.parent = guideAxes;\r\n        this._bZaxis.parent = guideAxes;\r\n        this._bXaxis.color= this._redCol;\r\n        this._bYaxis.color= this._greenCol\r\n        this._bZaxis.color= this._blueCol\r\n        this._hideBaxis();\r\n\r\n        //the small axis\r\n        let al: number = this._axesLen * this._axesScale * 0.75;\r\n        this._xaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, 0), new Vector3(al, 0, 0)], this._scene);\r\n        this._yaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, 0), new Vector3(0, al, 0)], this._scene);\r\n        this._zaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, 0), new Vector3(0, 0, al)], this._scene);\r\n\r\n        //lines are now pickable too\r\n        this._xaxis.isPickable = false;\r\n        this._yaxis.isPickable = false;\r\n        this._zaxis.isPickable = false;\r\n\r\n        this._xaxis.parent = guideAxes;\r\n        this._yaxis.parent = guideAxes;\r\n        this._zaxis.parent = guideAxes;\r\n        this._xaxis.color=this._redCol;\r\n        this._yaxis.color=this._greenCol;\r\n        this._zaxis.color=this._blueCol;\r\n\r\n        this._xaxis.renderingGroupId = 1;\r\n        this._yaxis.renderingGroupId = 1;\r\n        this._zaxis.renderingGroupId = 1;\r\n\r\n        return guideAxes;\r\n    }\r\n\r\n    private _pickedPlane: Mesh;\r\n    private _pALL: Mesh;\r\n    private _pXZ: Mesh;\r\n    private _pZY: Mesh;\r\n    private _pYX: Mesh;\r\n\r\n    private _createPickPlanes() {\r\n        this._pALL = Mesh.CreatePlane(\"\", 5, this._scene);\r\n        this._pXZ = Mesh.CreatePlane(\"\", 5, this._scene);\r\n        this._pZY = Mesh.CreatePlane(\"\", 5, this._scene);\r\n        this._pYX = Mesh.CreatePlane(\"\", 5, this._scene);\r\n\r\n        this._pALL.isPickable = false;\r\n        this._pXZ.isPickable = false;\r\n        this._pZY.isPickable = false;\r\n        this._pYX.isPickable = false;\r\n\r\n        this._pALL.visibility = 0;\r\n        this._pXZ.visibility = 0;\r\n        this._pZY.visibility = 0;\r\n        this._pYX.visibility = 0;\r\n\r\n        this._pALL.renderingGroupId = 1;\r\n        this._pXZ.renderingGroupId = 1;\r\n        this._pZY.renderingGroupId = 1;\r\n        this._pYX.renderingGroupId = 1;\r\n\r\n        this._pALL.lookAt(this._mainCamera.position);\r\n        this._pXZ.rotate(Axis.X, 1.57);\r\n        this._pZY.rotate(Axis.Y, 1.57);\r\n\r\n        let pickPlanes: Mesh = new Mesh(\"\", this._scene);\r\n        this._pALL.parent = pickPlanes;\r\n        this._pXZ.parent = pickPlanes;\r\n        this._pZY.parent = pickPlanes;\r\n        this._pYX.parent = pickPlanes;\r\n\r\n        return pickPlanes;\r\n\r\n\r\n    }\r\n\r\n    private _tCtl: Mesh;\r\n\r\n    private _tX: Mesh;\r\n    private _tY: Mesh;\r\n    private _tZ: Mesh;\r\n    private _tXZ: Mesh;\r\n    private _tZY: Mesh;\r\n    private _tYX: Mesh;\r\n    private _tAll: Mesh;\r\n    private _all_t:Mesh[];\r\n\r\n    private _tEndX: Mesh;\r\n    private _tEndY: Mesh;\r\n    private _tEndZ: Mesh;\r\n    private _tEndXZ: Mesh;\r\n    private _tEndZY: Mesh;\r\n    private _tEndYX: Mesh;\r\n    private _tEndAll: Mesh;\r\n    \r\n    private _all_tEnd:Mesh[];\r\n\r\n    private _createTransAxes() {\r\n        let r: number = this._pickWidth * 2 * this._axesScale;\r\n        let l: number = this._axesLen * this._axesScale;\r\n\r\n        this._tCtl = new Mesh(\"\", this._scene);\r\n\r\n        /*pickable invisible boxes around axes lines*/\r\n        this._createPickableTrans(r, l,this._tCtl,this._scene);\r\n\r\n        //non pickable but visible cones at end of axes lines\r\n        this._createNonPickableTrans(r,l,this._scene);\r\n    }\r\n    \r\n    private _createPickableTrans(r:number, l:number,tCtl:Mesh,scene:Scene){\r\n        let tX = this._extrudeBox(r / 2, l);\r\n        tX.name = \"X\";\r\n        let tY = tX.clone(\"Y\");\r\n        let tZ = tX.clone(\"Z\");\r\n\r\n        let tXZ = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, scene);\r\n        let tZY = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, scene);\r\n        let tYX = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, scene);\r\n\r\n        tXZ.rotation.x = 1.57;\r\n        tZY.rotation.y = -1.57;\r\n\r\n        tXZ.position.x = 2*r;\r\n        tXZ.position.z = 2*r;\r\n\r\n        tZY.position.z = 2*r;\r\n        tZY.position.y = 2*r;\r\n\r\n        tYX.position.y = 2*r;\r\n        tYX.position.x = 2*r;\r\n\r\n        tXZ.bakeCurrentTransformIntoVertices();\r\n        tZY.bakeCurrentTransformIntoVertices();\r\n        tYX.bakeCurrentTransformIntoVertices();\r\n\r\n        let tAll = Mesh.CreateBox(\"ALL\", r * 2, scene);\r\n\r\n        tX.parent = tCtl;\r\n        tY.parent = tCtl;\r\n        tZ.parent = tCtl;\r\n        tXZ.parent = tCtl;\r\n        tZY.parent = tCtl;\r\n        tYX.parent = tCtl;\r\n        tAll.parent = tCtl;\r\n\r\n        tX.rotation.y = 1.57;\r\n        tY.rotation.x -= 1.57;\r\n\r\n        this._tX=tX;\r\n        this._tY=tY;\r\n        this._tZ=tZ;\r\n        this._tXZ=tXZ;\r\n        this._tZY=tZY;\r\n        this._tYX=tYX;\r\n        this._tAll=tAll;\r\n        this._all_t=[tX,tY,tZ,tXZ,tZY,tYX,tAll]\r\n        \r\n        this._setVisibility(this._all_t,0);\r\n          //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._setPickableFalse(this._all_t)\r\n    }\r\n    \r\n    private _createNonPickableTrans(r:number,l:number,scene:Scene){\r\n        //cone length\r\n        let cl: number = l / 5;\r\n        //cone base radius\r\n        //let cr: number = r;\r\n        let tEndX = Mesh.CreateCylinder(\"\", cl, 0, r, 6, 1, scene);\r\n        let tEndY = tEndX.clone(\"\");\r\n        let tEndZ = tEndX.clone(\"\");\r\n\r\n        \r\n        let tEndXZ = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, scene);\r\n        let tEndZY = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, scene);\r\n        let tEndYX = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, scene);\r\n\r\n        let tEndAll = Mesh.CreateBox(\"ALL\", r ,scene);\r\n\r\n        tEndX.rotation.x = 1.57;\r\n        tEndY.rotation.x = 1.57;\r\n        tEndZ.rotation.x = 1.57;\r\n\r\n        tEndXZ.rotation.x = 1.57;\r\n        tEndZY.rotation.y = 1.57;\r\n        tEndYX.rotation.x = 0;\r\n\r\n        tEndXZ.position.x = 2*r;\r\n        tEndXZ.position.z = 2*r;\r\n\r\n        tEndZY.position.z = 2*r;\r\n        tEndZY.position.y = 2*r;\r\n\r\n        tEndYX.position.y = 2*r;\r\n        tEndYX.position.x = 2*r;\r\n\r\n        tEndX.parent = this._tX;\r\n        tEndY.parent = this._tY;\r\n        tEndZ.parent = this._tZ;\r\n        tEndXZ.parent = this._tXZ;\r\n        tEndZY.parent = this._tZY;\r\n        tEndYX.parent = this._tYX;\r\n        tEndAll.parent = this._tAll;\r\n\r\n        tEndX.position.z = l - cl / 2;\r\n        tEndY.position.z = l - cl / 2;\r\n        tEndZ.position.z = l - cl / 2;\r\n\r\n        tEndX.material = this._redMat;\r\n        tEndY.material = this._greenMat;\r\n        tEndZ.material = this._blueMat;\r\n        tEndXZ.material = this._greenMat;\r\n        tEndZY.material = this._redMat;\r\n        tEndYX.material = this._blueMat;\r\n        tEndAll.material = this._yellowMat;\r\n        \r\n        this._tEndX=tEndX;\r\n        this._tEndY=tEndY;\r\n        this._tEndZ=tEndZ;\r\n        this._tEndXZ=tEndXZ;\r\n        this._tEndZY=tEndZY;\r\n        this._tEndYX=tEndYX;\r\n        this._tEndAll=tEndAll;\r\n        this._all_tEnd=[tEndX,tEndY,tEndZ,tEndXZ,tEndZY,tEndYX,tEndAll];\r\n        \r\n        this._setPickableFalse(this._all_tEnd);\r\n        this._setRenderingGroup(this._all_tEnd);\r\n    }\r\n    \r\n   \r\n\r\n    private _rCtl: Mesh;\r\n\r\n    private _rX: Mesh;\r\n    private _rY: Mesh;\r\n    private _rZ: Mesh;\r\n    private _rAll: Mesh;\r\n    private _all_r:Mesh[];\r\n    \r\n    private _rEndX: LinesMesh;\r\n    private _rEndY: LinesMesh;\r\n    private _rEndZ: LinesMesh;\r\n    private _rEndAll: LinesMesh;\r\n    private _rEndAll2: LinesMesh;\r\n    private _all_rEnd:Mesh[];\r\n    \r\n\r\n    private _guideSize: number = 180;\r\n\r\n    public setRotGuideFull(y: boolean) {\r\n        if (y) this._guideSize = 360;\r\n        else this._guideSize = 180;\r\n        if (this._rCtl != null) {\r\n            this._rCtl.dispose();\r\n            this._rAll.dispose();\r\n            this._rCtl = null;\r\n            this.enableRotation();\r\n        }\r\n    }\r\n\r\n    private _createRotAxes() {\r\n        let d: number = this._axesLen * this._axesScale * 2;\r\n        this._rCtl = new Mesh(\"\", this._scene);\r\n\r\n        //pickable invisible torus around the rotation circles\r\n        this._createPickableRot(d,this._rCtl);\r\n\r\n        /*non pickable but visible circles */\r\n        this._createNonPickableRot(d);\r\n        \r\n    }\r\n    \r\n    private _createPickableRot(d:number,rCtl:Mesh){\r\n        let rX = this._createTube(d / 2, this._guideSize);\r\n        let rY = this._createTube(d / 2, this._guideSize);\r\n        let rZ = this._createTube(d / 2, this._guideSize);\r\n        let rAll = this._createTube(d / 1.75, 360);\r\n        rX.name = \"X\";\r\n        rY.name = \"Y\";\r\n        rZ.name = \"Z\";\r\n        rAll.name = \"ALL\";\r\n\r\n        rX.rotation.z = 1.57;\r\n        rZ.rotation.x = -1.57;\r\n        rX.bakeCurrentTransformIntoVertices();\r\n        rZ.bakeCurrentTransformIntoVertices();\r\n\r\n        rAll.rotation.x = 1.57;\r\n\r\n        rX.parent = rCtl;\r\n        rY.parent = rCtl;\r\n        rZ.parent = rCtl;\r\n        rAll.parent = this._pALL;\r\n        \r\n        this._rX=rX;\r\n        this._rY=rY;\r\n        this._rZ=rZ;\r\n        this._rAll=rAll;\r\n        this._all_r=[rX,rY,rZ,rAll];\r\n        \r\n        this._setVisibility(this._all_r,0);\r\n\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._setPickableFalse(this._all_r);\r\n    }\r\n    \r\n    private _createNonPickableRot(d:number){\r\n\r\n        let rEndX = this._createCircle(d / 2, this._guideSize, false);\r\n        let rEndY = rEndX.clone(\"\");\r\n        let rEndZ = rEndX.clone(\"\");\r\n        let rEndAll = this._createCircle(d / 1.75, 360, false);\r\n        let rEndAll2 = this._createCircle(d / 2, 360, false);\r\n\r\n        rEndX.parent = this._rX;\r\n        rEndY.parent = this._rY;\r\n        rEndZ.parent = this._rZ;\r\n\r\n        rEndX.rotation.z = 1.57;\r\n        rEndZ.rotation.x = -1.57;\r\n\r\n        rEndAll.parent = this._rAll;\r\n        rEndAll2.parent = this._rAll;\r\n\r\n\r\n        rEndX.color = this._redCol;\r\n        rEndY.color=this._greenCol;\r\n        rEndZ.color=this._blueCol;\r\n        rEndAll.color=this._yellowCol;\r\n        rEndAll2.color = Color3.Gray();\r\n        \r\n        this._rEndX=rEndX;\r\n        this._rEndY=rEndY;\r\n        this._rEndZ=rEndZ;\r\n        this._rEndAll=rEndAll;\r\n        this._rEndAll2=rEndAll2;\r\n        this._all_rEnd=[rEndX,rEndY,rEndZ,rEndAll,rEndAll2];\r\n\r\n        this._setPickableFalse(this._all_rEnd);\r\n        this._setRenderingGroup(this._all_rEnd);\r\n    }\r\n    \r\n    private _setVisibility(meshes:Mesh[],v:number){\r\n        meshes.map((m) => m.visibility=v)\r\n    }\r\n    private _setPickableFalse(meshes:Mesh[]){\r\n        meshes.map((m) => {m.isPickable=false})\r\n    }\r\n    private _setRenderingGroup(meshes:Mesh[]){\r\n        meshes.map((m) => m.renderingGroupId=2)\r\n    }\r\n\r\n    private _extrudeBox(w: number, l: number): Mesh {\r\n        let shape: Vector3[] = [new Vector3(w, w, 0), new Vector3(-w, w, 0), new Vector3(-w, -w, 0), new Vector3(w, -w, 0), new Vector3(w, w, 0)];\r\n        let path: Vector3[] = [new Vector3(0, 0, 0), new Vector3(0, 0, l)];\r\n        let box: Mesh = Mesh.ExtrudeShape(\"\", shape, path, 1, 0, 2, this._scene);\r\n        return box;\r\n    }\r\n\r\n    private _createCircle(r: number, t: number, double: boolean): LinesMesh {\r\n        if (t === null) t = 360;\r\n        let points: Vector3[] = [];\r\n        let x: number;\r\n        let z: number;\r\n        let a: number = 3.14 / 180;\r\n        let p: number = 0;\r\n        for (let i: number = 0; i <= t; i = i + 5) {\r\n            x = r * Math.cos(i * a);\r\n            if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n            points[p] = new Vector3(x, 0, z);\r\n            p++;\r\n        }\r\n        if (double) {\r\n            r = r - 0.04;\r\n            for (let i: number = 0; i <= t; i = i + 5) {\r\n                x = r * Math.cos(i * a);\r\n                if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n                points[p] = new Vector3(x, 0, z);\r\n                p++;\r\n            }\r\n        }\r\n        let circle: LinesMesh = Mesh.CreateLines(\"\", points, this._scene);\r\n        return circle;\r\n    }\r\n\r\n    private _createTube(r: number, t?: number): Mesh {\r\n        if (t === null) t = 360;\r\n        let points: Vector3[] = [];\r\n        let x: number;\r\n        let z: number;\r\n        let a: number = 3.14 / 180;\r\n        let p: number = 0;\r\n        for (let i: number = 0; i <= t; i = i + 30) {\r\n            x = r * Math.cos(i * a);\r\n            if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n            points[p] = new Vector3(x, 0, z);\r\n            p++;\r\n        }\r\n        let tube: Mesh = Mesh.CreateTube(\"\", points, this._pickWidth * this._axesScale * 2, 3, null, Mesh.NO_CAP, this._scene);\r\n        return tube;\r\n    }\r\n\r\n\r\n    private _sCtl: Mesh;\r\n    \r\n    private _sX: Mesh;\r\n    private _sY: Mesh;\r\n    private _sZ: Mesh;\r\n    private _sXZ: Mesh;\r\n    private _sZY: Mesh;\r\n    private _sYX: Mesh;\r\n    private _sAll: Mesh;\r\n    private _all_s:Mesh[];\r\n\r\n    private _sEndX: Mesh;\r\n    private _sEndY: Mesh;\r\n    private _sEndZ: Mesh;\r\n    private _sEndXZ: Mesh;\r\n    private _sEndZY: Mesh;\r\n    private _sEndYX: Mesh;\r\n    private _sEndAll: Mesh;\r\n    private _all_sEnd:Mesh[];\r\n\r\n\r\n    private _createScaleAxes() {\r\n        let r: number = this._pickWidth * 2 * this._axesScale;\r\n        let l: number = this._axesLen * this._axesScale;\r\n\r\n        this._sCtl = new Mesh(\"\", this._scene);\r\n\r\n        /* pickable , invisible part */\r\n        this._createPickableScale(r,l,this._sCtl);\r\n\r\n        /* non pickable visible boxes at end of axes */\r\n        this._createNonPickableScale(r,l);\r\n        \r\n        \r\n    }\r\n\r\n    private _createPickableScale(r:number,l:number,sCtl:Mesh){\r\n        let sX:Mesh = this._extrudeBox(r / 2, l);\r\n        sX.name = \"X\";\r\n        let sY:Mesh = sX.clone(\"Y\");\r\n        let sZ:Mesh = sX.clone(\"Z\");\r\n\r\n        let sXZ:Mesh = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, this._scene);\r\n        let sZY:Mesh = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, this._scene);\r\n        let sYX:Mesh = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, this._scene);\r\n\r\n\r\n        sXZ.rotation.x = 1.57;\r\n        sZY.rotation.y = -1.57;\r\n\r\n        sXZ.position.x = 2*r;\r\n        sXZ.position.z = 2*r;\r\n\r\n        sZY.position.z = 2*r;\r\n        sZY.position.y = 2*r;\r\n\r\n        sYX.position.y = 2*r;\r\n        sYX.position.x = 2*r;\r\n\r\n        sXZ.bakeCurrentTransformIntoVertices();\r\n        sZY.bakeCurrentTransformIntoVertices();\r\n        sYX.bakeCurrentTransformIntoVertices();\r\n\r\n        let sAll:Mesh = Mesh.CreateBox(\"ALL\", 2*r, this._scene);\r\n\r\n        sX.parent = sCtl;\r\n        sY.parent = sCtl;\r\n        sZ.parent = sCtl;\r\n        sAll.parent = sCtl;\r\n        sXZ.parent = sCtl;\r\n        sZY.parent = sCtl;\r\n        sYX.parent = sCtl;\r\n\r\n        sX.rotation.y = 1.57;\r\n        sY.rotation.x -= 1.57;\r\n\r\n        this._sX=sX;\r\n        this._sY=sY;\r\n        this._sZ=sZ;\r\n        this._sXZ=sXZ;\r\n        this._sZY=sZY;\r\n        this._sYX=sYX;\r\n        this._sAll=sAll;\r\n        this._all_s=[sX,sY,sZ,sXZ,sZY,sYX,sAll];\r\n        \r\n        this._setVisibility(this._all_s,0);\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._setPickableFalse(this._all_s);\r\n    }\r\n    \r\n    private _createNonPickableScale(r:number,l:number){\r\n        \r\n        let sEndX = Mesh.CreateBox(\"\", r, this._scene);\r\n        let sEndY = sEndX.clone(\"\");\r\n        let sEndZ = sEndX.clone(\"\");\r\n\r\n        let sEndXZ = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, this._scene);\r\n        let sEndZY = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, this._scene);\r\n        let sEndYX = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, this._scene);\r\n\r\n\r\n        let sEndAll = Mesh.CreateBox(\"ALL\", r, this._scene);\r\n\r\n        sEndXZ.rotation.x = 1.57;\r\n        sEndZY.rotation.y = -1.57;\r\n\r\n        sEndXZ.position.x = 2*r;\r\n        sEndXZ.position.z = 2*r;\r\n\r\n        sEndZY.position.z = 2*r;\r\n        sEndZY.position.y = 2*r;\r\n\r\n        sEndYX.position.y = 2*r;\r\n        sEndYX.position.x = 2*r;\r\n\r\n        sEndX.parent = this._sX;\r\n        sEndY.parent = this._sY;\r\n        sEndZ.parent = this._sZ;\r\n        sEndXZ.parent = this._sXZ;\r\n        sEndZY.parent = this._sZY;\r\n        sEndYX.parent = this._sYX;\r\n        sEndAll.parent = this._sAll;\r\n\r\n        sEndX.position.z = l - r / 2;\r\n        sEndY.position.z = l - r / 2;\r\n        sEndZ.position.z = l - r / 2;\r\n\r\n        sEndX.material = this._redMat;\r\n        sEndY.material = this._greenMat;\r\n        sEndZ.material = this._blueMat;\r\n        sEndXZ.material = this._greenMat;\r\n        sEndZY.material = this._redMat;\r\n        sEndYX.material = this._blueMat;\r\n        sEndAll.material = this._yellowMat;\r\n         \r\n        this._sEndX=sEndX;\r\n        this._sEndY=sEndY;\r\n        this._sEndZ=sEndZ;\r\n        this._sEndXZ=sEndXZ;\r\n        this._sEndZY=sEndZY;\r\n        this._sEndYX=sEndYX;\r\n        this._sEndAll=sEndAll;\r\n        this._all_sEnd=[sEndX,sEndY,sEndZ,sEndXZ,sEndZY,sEndYX,sEndAll];\r\n        \r\n        this._setPickableFalse(this._all_sEnd);\r\n        this._setRenderingGroup(this._all_sEnd);\r\n    }\r\n\r\n\r\n    /**\r\n     * checks if a have left hand , right hand issue.\r\n     * In other words if a mesh is a LHS mesh in RHS system or \r\n     * a RHS mesh in LHS system\r\n     * The X axis will be reversed in such cases.\r\n     * thus Cross product of X and Y should be inverse of Z.\r\n     * \r\n     */\r\n//    private _check_LHS_RHS(mesh: Mesh) {\r\n//        let actualZ = Vector3.Cross(this._localX, this._localY);\r\n//        //same direction or opposite direction of Z\r\n//        if (Vector3.Dot(actualZ, this._localZ) < 0) return true;\r\n//        else return false;\r\n//    }\r\n\r\n    /**\r\n     * set how transparent the axes are\r\n     * 0 to 1\r\n     * 0 - completely transparent\r\n     * 1 - completely non transparent\r\n     * default is 0.75\r\n     */\r\n    public setVisibility(v: number) {\r\n        this._visibility = v;\r\n    }\r\n    public setLocal(l: boolean) {\r\n        if (this._local == l) return;\r\n        this._local = l;\r\n        if (!l) {\r\n            this._ecRoot.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n    }\r\n\r\n    public isLocal(): boolean {\r\n        return this._local;\r\n    }\r\n\r\n    public setTransSnap(s: boolean) {\r\n        this._snapT = s;\r\n    }\r\n\r\n    public setRotSnap(s: boolean) {\r\n        this._snapR = s;\r\n    }\r\n\r\n    public setScaleSnap(s: boolean) {\r\n        this._snapS = s;\r\n    }\r\n\r\n    private _tSnap: Vector3 = new Vector3(this._transSnap, this._transSnap, this._transSnap);\r\n    public setTransSnapValue(t: number) {\r\n        this._tSnap.copyFromFloats(t, t, t);\r\n        this._transSnap = t;\r\n    }\r\n\r\n    public setRotSnapValue(r: number) {\r\n        this._rotSnap = r;\r\n    }\r\n\r\n    /**\r\n     * use this to set the scale snap value\r\n     */\r\n    public setScaleSnapValue(r: number) {\r\n        this._scaleSnap = r;\r\n    }\r\n\r\n    //few temp vectors & matrix\r\n    private _tv1: Vector3 = new Vector3(0, 0, 0);\r\n    private _tv2: Vector3 = new Vector3(0, 0, 0);\r\n    private _tv3: Vector3 = new Vector3(0, 0, 0);\r\n    private _tm: Matrix = new Matrix();\r\n    private _getAngle2(p1: Vector3, p2: Vector3, cameraPos: Vector3, c2ec: Vector3, mN: Vector3): number {\r\n        /**\r\n         * A) find out if the camera is above , below, left, right of the rotation plane\r\n         */\r\n        //project \"camera to ec\" vector onto mesh normal to get distance to rotation plane\r\n        let d: number = Vector3.Dot(c2ec, mN);\r\n        //scale mesh normal by above ammount to get vector to rotation plane\r\n        mN.scaleToRef(d, this._tv1);\r\n        //get the point of intersection of vector from camera perpendicular to rotation plane\r\n        cameraPos.addToRef(this._tv1, this._tv2);\r\n        let i: Vector3 = this._tv2;//save some typing\r\n        //find the co-ordinate of this point in the cameras frame of reference\r\n        this._mainCamera.getWorldMatrix().invertToRef(this._tm);\r\n        Vector3.TransformCoordinatesToRef(this._tv2, this._tm, this._tv2);\r\n        //find in which quadarant the point (and thus the rotation plane) is in the camera xy plane\r\n        let q: number = 0; //(1=x y,2=-x y,3=-x -y,4=x -y)\r\n        if (i.x >= 0 && i.y >= 0) q = 1;\r\n        else if (i.x <= 0 && i.y >= 0) q = 2;\r\n        else if (i.x <= 0 && i.y <= 0) q = 3;\r\n        else if (i.x >= 0 && i.y <= 0) q = 4;\r\n\r\n        /**\r\n         * B) find out if the user moved pointer up,down, right, left\r\n         */\r\n\r\n        //find movement vector in camera frame of reference\r\n        Vector3.TransformCoordinatesToRef(p1, this._tm, this._tv1);\r\n        Vector3.TransformCoordinatesToRef(p2, this._tm, this._tv2);\r\n        this._tv2.subtractInPlace(this._tv1);\r\n        let mv: Vector3 = this._tv2; //save some typing\r\n        //for now lets set the angle magnitutde same as amount by which the mouse moved\r\n        let angle: number = mv.length();\r\n\r\n        let m: String = \"\";//(u ,d ,r,l)\r\n        if (mv.x >= 0 && mv.y >= 0) {\r\n            if (mv.x >= mv.y) m = \"r\"; else m = \"u\";\r\n        } else if (mv.x <= 0 && mv.y >= 0) {\r\n            if (-mv.x >= mv.y) m = \"l\"; else m = \"u\";\r\n        } else if (mv.x <= 0 && mv.y <= 0) {\r\n            if (-mv.x >= -mv.y) m = \"l\"; else m = \"d\";\r\n        } else if (mv.x >= 0 && mv.y <= 0) {\r\n            if (mv.x >= -mv.y) m = \"r\"; else m = \"d\";\r\n        }\r\n\r\n        /**\r\n         * C) decide if the user was trying to rotate clockwise (+1) or anti-clockwise(-1)\r\n         */\r\n\r\n        let r: number = 0;\r\n        //if mouse moved down /up and rotation plane is on  right or left side of user\r\n        if (m == \"d\") {\r\n            if (q == 1 || q == 4) r = 1;\r\n            else r = -1;\r\n        } else if (m == \"u\") {\r\n            if (q == 1 || q == 4) r = -1;\r\n            else r = 1;\r\n            //if mouse moved right/left and  rotation plane is above or below user\r\n        } else if (m == \"r\") {\r\n            if (q == 2 || q == 1) r = 1;\r\n            else r = -1;\r\n        } else if (m == \"l\") {\r\n            if (q == 2 || q == 1) r = -1;\r\n            else r = 1;\r\n        }\r\n\r\n        return r * angle;\r\n    }\r\n\r\n    /**\r\n     * finds the angle subtended from points p1 to p2 around the point p\r\n     * checks if the user was trying to rotate clockwise (+ve in LHS) or anticlockwise (-ve in LHS)\r\n     * to figure this check the orientation of the user(camera)to ec vector with the rotation normal vector\r\n     */\r\n    private _getAngle(p1: Vector3, p2: Vector3, p: Vector3, c2ec: Vector3): number {\r\n        p1.subtractToRef(p, this._tv1);\r\n        p2.subtractToRef(p, this._tv2);\r\n        Vector3.CrossToRef(this._tv1, this._tv2, this._tv3);\r\n        let angle: number = Math.asin(this._tv3.length() / (this._tv1.length() * this._tv2.length()));\r\n        //camera looking down from front of plane or looking up from behind plane\r\n        if ((Vector3.Dot(this._tv3, c2ec) > 0)) {\r\n            angle = -1 * angle;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n\r\n    private _createMaterials(scene: Scene) {\r\n        this._redMat=EditControl._getStandardMaterial(this._redCol, scene);\r\n        this._greenMat=EditControl._getStandardMaterial(this._greenCol, scene);\r\n        this._blueMat=EditControl._getStandardMaterial(this._blueCol, scene);\r\n        this._whiteMat=EditControl._getStandardMaterial(this._whiteCol, scene);\r\n        this._yellowMat=EditControl._getStandardMaterial(this._yellowCol, scene);\r\n    }\r\n\r\n    private _disposeMaterials() {\r\n        this._redMat.dispose();\r\n        this._greenMat.dispose();\r\n        this._blueMat.dispose();\r\n        this._whiteMat.dispose();\r\n        this._yellowMat.dispose();\r\n    }\r\n\r\n    private static _getStandardMaterial(col: Color3, scene: Scene): StandardMaterial {\r\n        let mat: StandardMaterial = new StandardMaterial(\"\", scene);\r\n        mat.emissiveColor = col;\r\n        mat.diffuseColor = Color3.Black();\r\n        mat.specularColor = Color3.Black();\r\n        mat.backFaceCulling = false;\r\n        return mat;\r\n    }\r\n}\r\n\r\nclass ActHist {\r\n    private mesh: AbstractMesh;\r\n\r\n    private lastMax: number = 10;\r\n\r\n    private acts: Array<Act> = new Array<Act>();\r\n\r\n    private last: number = -1;\r\n\r\n    private current: number = -1;\r\n\r\n    public constructor(mesh: AbstractMesh, capacity: number) {\r\n        this.mesh = mesh;\r\n        this.lastMax = capacity - 1;\r\n        this.add();\r\n    }\r\n\r\n    public setCapacity(c: number) {\r\n        if ((c == 0)) {\r\n            console.error(\"capacity should be more than zero\");\r\n            return;\r\n        }\r\n        this.lastMax = c - 1;\r\n        this.last = -1;\r\n        this.current = -1;\r\n        this.acts = new Array<Act>();\r\n        this.add();\r\n    }\r\n\r\n    public add(at?: number) {\r\n        if (at === undefined) at = null;\r\n        let act: Act = new Act(this.mesh, at);\r\n        if ((this.current < this.last)) {\r\n            this.acts.splice(this.current + 1);\r\n            this.last = this.current;\r\n        }\r\n        if ((this.last == this.lastMax)) {\r\n            this.acts.shift();\r\n            this.acts.push(act);\r\n        } else {\r\n            this.acts.push(act);\r\n            this.last++;\r\n            this.current++;\r\n        }\r\n    }\r\n\r\n    public undo(): number {\r\n        if ((this.current > 0)) {\r\n            let at: number = (<Act>this.acts[this.current]).getActionType()\r\n            this.current--;\r\n            (<Act>this.acts[this.current]).perform(this.mesh);\r\n            return at;\r\n        }\r\n    }\r\n\r\n    public redo() {\r\n        if ((this.current < this.last)) {\r\n            this.current++;\r\n            (<Act>this.acts[this.current]).perform(this.mesh);\r\n            return (<Act>this.acts[this.current]).getActionType()\r\n        }\r\n    }\r\n}\r\n\r\nclass Act {\r\n    private _p: Vector3;\r\n\r\n    private _rQ: Quaternion;\r\n    private _rE: Vector3;\r\n\r\n    private _s: Vector3;\r\n\r\n    //actiontype\r\n    private _at: number;\r\n\r\n    public constructor(mesh: AbstractMesh, at: number) {\r\n        this._p = mesh.position.clone();\r\n        //if (mesh.rotationQuaternion == null) {\r\n        if (mesh.rotationQuaternion == null) {\r\n            this._rQ = null;\r\n            this._rE = mesh.rotation.clone();\r\n        } else {\r\n            this._rQ = mesh.rotationQuaternion.clone();\r\n            this._rE = null;\r\n        }\r\n        this._s = mesh.scaling.clone();\r\n        this._at = at;\r\n    }\r\n\r\n    public getActionType(): number {\r\n        return this._at;\r\n    }\r\n\r\n    public perform(mesh: AbstractMesh) {\r\n        mesh.position.copyFrom(this._p)\r\n        //check if we are doing euler or quaternion now\r\n        //also check what were we doing when the rotation value\r\n        //was captured and set value accordingly\r\n        if (mesh.rotationQuaternion == null) {\r\n            if (this._rE != null) {\r\n                //mesh.rotation = this.rE.clone();\r\n                mesh.rotation.copyFrom(this._rE);\r\n            } else {\r\n                //mesh.rotation = this.r.toEulerAngles();\r\n                mesh.rotation.copyFrom(this._rQ.toEulerAngles());\r\n            }\r\n        } else {\r\n            if (this._rQ != null) {\r\n                mesh.rotationQuaternion.copyFrom(this._rQ);\r\n            } else {\r\n                //TODO use BABYLON.Quaternion.RotationYawPitchRoll(rot.y, rot.x, rot.z) instead of toQuaternion.\r\n                //mesh.rotationQuaternion.copyFrom(this.rE.toQuaternion());\r\n                mesh.rotationQuaternion.copyFrom(Quaternion.RotationYawPitchRoll(this._rE.y, this._rE.x, this._rE.z));\r\n            }\r\n        }\r\n        mesh.scaling.copyFrom(this._s);\r\n    }\r\n}\r\n"],"sourceRoot":""}